module Monitor;

export *;
import * from ABS.DC;
import * from MailGen;
import * from Architecture;
import * from Sys_init;
import * from Wrapper;
import * from DB;
import * from Scaler;
import * from Param;
import * from Mixer;

interface MonitorInterface {}

class Monitor(ScalerServiceInterface scaler, MixerInterface mixer, DBInterface db, List<Int> init_conf) implements MonitorInterface {
  Int time = 0;
  List<Int> last_pred_config = init_conf; //field for proactive-reactive global scaling
  List<Rat> errors = list[]; //field for proactive-reactive global scaling
  //Rat last_pred = 32; //uncomment when using literature mixing method

  Pair<Rat,Rat> find_maxes() {
    Rat max_pred = -1;
    Rat max_true = -1;
    Int i = 0;
    while(i < ratio()) {
      await duration(monitoringWin()/ratio(), monitoringWin()/ratio());
      Rat chunk_pred = -1;
      if(proactiveness()) chunk_pred = nth(predicted_workload(), (i + time) % length(predicted_workload()));
      Rat chunk_real = db.get_one_sec_workload();
      db.one_sec_timeout();
      max_pred = max(chunk_pred,max_pred);
      max_true = max(chunk_real,max_true);
      i = i + 1;
    }
    return Pair(max_pred, max_true);
  }

	Unit run() {
    while(time < 200){
      Pair<Rat,Rat> maxes = this.find_maxes();
      Rat max_pred = fst(maxes);
      Rat max_true = snd(maxes);
      Rat target_workload = max_true;
      if(proactiveness()) target_workload = max_pred;
      if(mixing()) {
        List<Int> actual_conf = scaler.computeConfiguration(max_true);
        target_workload = mixer.mix(max_true, max_pred, last_pred_config, actual_conf);
        last_pred_config = scaler.computeConfiguration(max_pred);
      }
      time = time + ratio();
      Rat mcl = scaler.getSystemMCL();
      Int nInst = scaler.computeInstanceNumber();
      if(target_workload - (mcl - kbig()) > k() || (mcl - kbig()) - target_workload > k()) {
        List<Int> target_config = scaler.computeConfiguration(target_workload);
        scaler.scale(target_config);
      }
      this.log(max_true, max_pred, mcl, target_workload, nInst); //debug purpose
      db.resetMetrics();
    }
  }

  Unit log(Rat max_true, Rat max_pred, Rat mcl, Rat target, Int nInst) {
      Float averageAnalysisTime = db.returnAverageAnalysisTime();
      Rat completed = db.messageCompleted();
      Rat rejected = db.rejectedMessages();
      Rat totalMsg = db.get_inbound_workload();
      Rat totalCost = scaler.computeTotalCost(ratio());
      String toPrint = toString(time) + "  " + toString(float(100/3) * averageAnalysisTime);
      if(proactiveness()) toPrint = toPrint + " #next_max: " + toString(max_pred);
      toPrint = toPrint + " curr_max: " + toString(max_true); 
      if(mixing()) toPrint = toPrint + " target_scale: " + toString(float(target));
      toPrint = toPrint + " TOT: " + toString(totalMsg) + " COMP: " + toString(completed) + " REJ: " + toString(rejected) + " SUPP: " + toString(mcl) + " COST: " + toString(float(totalCost)) + " INST: " + toString(nInst);
      String scalingAct = scaler.getScalingActions();
      toPrint = toPrint + scalingAct;
      println(toPrint);
  }
}

