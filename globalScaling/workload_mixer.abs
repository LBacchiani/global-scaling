module Mixer;

export *;

import * from Param;
import * from ABS.DC;


interface MixerInterface {
    Rat mix(Rat max_true, Rat max_pred, List<Int> last_pred_config, List<Int> actual_conf);
}

class Mixer implements MixerInterface{
   List<Rat> errors = list[]; //field for proactive-reactive global scaling

  //////MIXING TECHNIQUE//////////
  List<Int> compute_diff(List<Int> pred_conf, List<Int> actual_conf) {
    List<Int> diff = list[];
    Int i = 0;
    while(i < length(pred_conf)) {
        diff = appendright(diff, nth(pred_conf, i) - nth(actual_conf, i));
        i = i + 1;
    }
    return diff;
  }

 Rat compute_weight(List<Int> pred_conf, List<Int> actual_conf) {
    List<Rat> dev_factors = scores();
    Rat curr_weight = 0;
    List<Int> diffs = this.compute_diff(pred_conf, actual_conf); 
    while(!isEmpty(pred_conf) && !isEmpty(actual_conf)) {
      curr_weight = curr_weight + abs(head(diffs) * head(dev_factors));
      pred_conf = tail(pred_conf);
      actual_conf = tail(pred_conf);
      diffs = tail(diffs);
      dev_factors = tail(dev_factors);
    }
    return min(curr_weight, 1);
  }

  Unit store_weights(Rat curr_weight) {
    errors = appendright(errors, abs(curr_weight));
    if(length(errors) == memory()) errors = tail(errors);
  }

  Rat compute_distance() {
    Rat weight = 0;
    Int toDivide = 0;
    foreach(e,i in errors) {
      weight = weight + e * (i + 1);
      toDivide = toDivide + (i + 1);
    }
    return weight / toDivide;
  }


  Rat mix(Rat max_true, Rat max_pred, List<Int> last_pred_config, List<Int> actual_conf) {
    Rat curr_weight = this.compute_weight(last_pred_config, actual_conf);
    this.store_weights(curr_weight);
    Rat react_score = this.compute_distance();
    Rat pred_score = 1 - react_score;
    Rat target_scale = (react_score * max_true) + (pred_score * max_pred);
    return target_scale;
  }

  //////END MIXING TECHNIQUE//////////


  ////MIXING TECHNIQUE TAKEN FROM THE LITERATURE////
 /*Rat compute_diff(Rat pred, Rat obs) {
    Rat diff = 0;
    Int j = 0;
    Int toDivide = 0;
    errors = appendright(errors, max(0, obs - pred));
    if(length(errors) == 3) errors = tail(errors);
    while(j < length(errors)) {
      diff = diff + nth(errors,j);
      toDivide = toDivide + 1;
      j = j + 1;
    }
    if(toDivide != 0) diff = diff / toDivide;
    return diff;
  }


  Rat mix(Rat max_true, Rat max_pred) {
    Rat diff = this.compute_diff(last_pred, max_true);
    last_pred = max_pred;
    Rat target_scale = max_pred + diff;
    return target_scale;
  }*/

  /////END MIXING TECHNIQUE TAKEN FROM THE LITERATURE////
}