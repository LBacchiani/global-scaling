module Scaler;

export *;
import * from ABS.DC;
import * from Wrapper;


interface ScalerServiceInterface {
  Unit insertScalingElements(List<Int> components, WrapperScaleInterface scalingObj, String scalingName);
  Unit scale(List<Int> configDeltas);
  Rat getSystemMCL();
  String getScalingActions();
  Int computeInstanceNumber();
  Rat computeTotalCost(Int ratio);
  List<Int> computeConfiguration(Rat inbound_workload);
}

class ScalerService(Int kbig, Rat initialCost, Int initInstancesNumber) implements ScalerServiceInterface {

  List<Int> mcls = list[116, 110, 100, 120, 231, 231, 90, 90, 300];
  List<Rat> mfs = list[1, 1, 5/2, 2, 3/2, 3/2, 3/2, 3/2, 5];
  List<Int> baseConfig = list[1, //MR
                              1, //MP
                              //0, //HA
                              //0, //LA
                              //0, //TA
                              2, //SA
                              1,  //VS
                              1, //AM
                              1, //IA
                              1,  //NSFW
                              1,  //IR
                              1]; //MA
  List<List<Int>> scaleComponents = list[];
  List<Int> deployedDeltas = list[];
  List<WrapperScaleInterface> orchestrationDeltas = list[];
  List<String> scaleNames = list[];
  List<Int> scalingTrace = list[];
  List<Int> printableconfig = list[];
  Rat mcl = 0;
  Int numScales = 0;
  String scalingAct = "";

  Unit insertScalingElements(List<Int> components, WrapperScaleInterface scalingObj, String scalingName) {
    scaleComponents = appendright(scaleComponents, components);
    deployedDeltas = appendright(deployedDeltas, 0);
    orchestrationDeltas = appendright(orchestrationDeltas, scalingObj);
    scalingTrace = appendright(scalingTrace, 0);
    scaleNames = appendright(scaleNames, scalingName);
    numScales = numScales + 1;
  }

  List<Int> computeConfiguration(Rat inbound_workload) {
    List<Int> configDeltas = this.createEmpty(numScales);
    printableconfig = configDeltas;
    List<Int> config = baseConfig;
    mcl = this.mcl(config);
    Bool configFound = (mcl - kbig) - inbound_workload  >= 0;
    while(!configFound) {
      List<Int> candidateConfig = baseConfig;
      Int i = -1;
      while(i < numScales - 1 && !configFound) {
        i = i + 1;
        candidateConfig = this.vSum(config, nth(scaleComponents,i));
        mcl = this.mcl(candidateConfig);
        configFound = (mcl - kbig) - inbound_workload  >= 0;
      }
      config = candidateConfig;
      printableconfig = this.incrementValue(i,printableconfig);
      configDeltas = this.addDeltas(i,configDeltas);
    }
    return configDeltas;
  }


  Unit scale(List<Int> configDeltas) {
    this.reconfigure(deployedDeltas, configDeltas);
    scalingAct = this.recordAction(scalingTrace, printableconfig);
    deployedDeltas = configDeltas;
    scalingTrace = printableconfig;
  }

  Rat getSystemMCL() {
    if(mcl == 0) mcl = this.mcl(baseConfig);
    return mcl;
  }

  String getScalingActions() {
    String tmp = scalingAct;
    if(scalingAct != "") scalingAct = "";
    return tmp;
  }

  Rat computeTotalCost(Int ratio) {
    Rat totalCost = initialCost;
    foreach(orch in orchestrationDeltas) {
      WrapperScaleInterface wrapper = orch;
      Rat scaleCost = this.computeCostPerScaling(wrapper);
      Int deplTimes = wrapper.getDeplTimes();
      scaleCost = scaleCost * deplTimes;
      totalCost = totalCost + scaleCost;
    }
    return totalCost*ratio/(1000*3600);
  }

  Int computeInstanceNumber() {
    Int nInstances = initInstancesNumber;
    foreach(orch in orchestrationDeltas) {
      WrapperScaleInterface wrapper = orch;
      Int n = wrapper.getDeployedInstances();
      Int deplTimes = wrapper.getDeplTimes();
      nInstances = nInstances + (n * deplTimes);
    }
    return nInstances;
  }

  ////private methods/////

  Rat computeCostPerScaling(WrapperScaleInterface wrapper) {
    List<DeploymentComponent> dcs = wrapper.getDeploymentComponent();
    Rat cost = 0;
    foreach(dc in dcs) {
      Rat singleCost = dc.getCostPerInterval();
      cost = cost + singleCost;
    }
    return cost;
  }

  Rat mcl(List<Int> microserviceInstances) {
    Rat mcl = 0;
    Int i = 0;
    while(i < length(microserviceInstances)) {
      Rat n_inst = nth(microserviceInstances,i);
      Rat handled_frequency = n_inst * nth(mcls,i) / nth(mfs,i);
      if(handled_frequency < mcl || mcl == 0){mcl = handled_frequency;}
      i = i + 1;
    }
    return mcl;
  }

  List<Int> vSum(List<Int> v1, List<Int> v2) {
    Int i = 0;
    List<Int> res = list[];
    while(i < length(v1)) {
      Int e1 = nth(v1,i);
      Int e2 = nth(v2,i);
      res = appendright(res, e1 + e2);
      i = i + 1;
    }
    return res;
  }

  List<Int> createEmpty(Int nDeltas) {
    Int n = nDeltas;
    List<Int> empty = list[];
    while(n > 0) {empty = appendright(empty, 0); n = n - 1;}
    return empty;
  }

  List<Int> incrementValue(Int index, List<Int> list) {
    List<Int> updatedList = list[];
    Int i = 0;
    while(i < length(list)) {
      if(i == index){updatedList = appendright(updatedList, nth(list, i) + 1);}
      else{updatedList = appendright(updatedList, nth(list, i));}
      i = i + 1;
    }
    return updatedList;
  }

  List<Int> addDeltas(Int scaleIndex, List<Int> currentPoliciesConfig) {
    List<Int> configDeltas = this.incrementValue(scaleIndex, currentPoliciesConfig);
    Int i = 0;
    while(i < scaleIndex) {
      configDeltas = this.incrementValue(i, configDeltas);
      i = i + 1;
    }
    return configDeltas;
  }

  String recordAction(List<Int> scalingTrace, List<Int> printableconfig) {
    String toPrint = "";
    Int i = 0;
    while(i < numScales) {
      Int diff = nth(printableconfig,i) - nth(scalingTrace,i);
      String name = nth(scaleNames, i);
      if (diff > 0) {toPrint = toPrint + " " + name + "-upx" + toString(diff);}
      else if (diff < 0) {toPrint = toPrint + " " + name + "-downx" + toString(-diff);}
      i = i + 1;
    }
    return toPrint;
  }

  Unit reconfigure(List<Int> deployedDeltas, List<Int> configDeltas) {
    Int i = 0;
    while(i < numScales) {
      Int diff = nth(configDeltas,i) - nth(deployedDeltas,i);
      Rat num = abs(diff);
      while(num > 0) {
         if (diff > 0) {nth(orchestrationDeltas,i)!deploy();}
         else {nth(orchestrationDeltas,i)!undeploy();}
         num = num - 1;
      }
      i = i + 1;
    }
  }

}