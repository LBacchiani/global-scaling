module BalancerMonitor;

export *;
import * from Architecture;
import * from Param;

interface LoadBalancerMonitorInterface{
  Unit check();
  Unit tick();
  Unit printReqs();
}

class LoadBalancerMonitor(LoadBalancer balancer, String balancerName, Rat mcl, Int baseInstanceN, Rat mf) implements LoadBalancerMonitorInterface {
  Int deplInstances = baseInstanceN;
  ScalingWrapper sw;
  Rat k = k() * mf;
  Rat kbig =  kbig() * mf;
  Int max = 0;
  List<Int> reqs = list[];

  {sw = new ScalingWrapperImpl(balancer);}

  Unit tick() {balancer.tick();}

  Unit printReqs() {println(balancerName + ": " + toString(reqs));}

  Unit check() {
    Int max = balancer.get_one_sec_workload();
    reqs = appendright(reqs,max);
    if(max - (mcl * deplInstances - kbig)  > k || (mcl * deplInstances - kbig) - max > k) {
      Int configInstances = ceil(float((max + kbig)/ mcl));
      if(configInstances > deplInstances) {sw!deploy(configInstances - deplInstances);}
      else if(configInstances < deplInstances && deplInstances >= baseInstanceN) {sw!undeploy(deplInstances - configInstances);}
      deplInstances = configInstances;
    }
    balancer.resetMetrics();
  }
}

interface ScalingWrapper {
  Unit deploy(Int n);
  Unit undeploy(Int n);
}

class ScalingWrapperImpl(LoadBalancer balancer) implements ScalingWrapper{
  Unit deploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!deploy();
      times = times - 1;
    }
  }

  Unit undeploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!undeploy();
      times = times - 1;
    }
  }
}
