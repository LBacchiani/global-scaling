module Param;

export *;
import * from ABS.DC;
import * from ABS.SmartDeploy;

def Int kbig() = 20;
def Int k() = 10;
def Int monitoringWin() = 300;
def Int sendingWin() = 30;
def Int ratio() = truncate(monitoringWin() / sendingWin());
def Bool oracleScaling() = False;

/*
//request prediction for oracle scaling ENRON

//message receiver
def List<Int> mr_prediction() = case oracleScaling() {
    True => list[27, 120, 535, 675, 635, 710, 760, 745, 690, 552, 505, 405, 320, 312, 322, 260, 232, 150, 400, 475, 535, 675, 635]
    _ => list[]
};
//message parser
def List<Int> mp_prediction() = case oracleScaling() {
    True => list[27, 119, 276, 586, 605, 701, 761, 745, 690, 552, 505, 405, 320, 312, 322, 260, 232, 150, 270, 466, 535, 597, 622]
    _ => list[]
};
//sentiment analyser
def List<Int> sa_prediction() = case oracleScaling() {
    True => list[57, 279, 550, 862, 1534, 1637, 1950, 1879, 1759, 1349, 1274, 1060, 787, 810, 831, 670, 595, 350, 543, 851, 1337, 1433, 1640]
    _ => list[]
};
//virus scanner
def List<Int> vs_prediction() = case oracleScaling() {
    True => list[66, 239, 436, 697, 1242, 1312, 1517, 1499, 1389, 1103, 1048, 810, 647, 649, 678, 554, 456, 328, 467, 704, 1043, 1168, 1225]
    _ => list[]
};
//attachment manager
def List<Int> am_prediction() = case oracleScaling() {
    True => list[53, 96, 285, 373, 648, 984, 1097, 1090, 1031, 831, 797, 603, 494, 490, 506, 418, 345, 245, 327, 480, 646, 868, 913]
    _ => list[]
};
//image analyser
def List<Int> ia_prediction() = case oracleScaling() {
    True => list[53, 96, 285, 373, 489, 945, 1127, 1090, 1031, 831, 797, 603, 494, 490, 506, 418, 345, 245, 327, 469, 646, 702, 901]
    _ => list[]
};
//nsfw
def List<Int> nsfw_prediction() = case oracleScaling() {
    True => list[53, 96, 272, 418, 467, 708, 1137, 1093, 1031, 831, 797, 603, 494, 490, 506, 418, 345, 245, 327, 464, 646, 702, 913]
    _ => list[]
};
//image recognizer
def List<Int> ir_prediction() = case oracleScaling() {
    True => list[53, 96, 272, 418, 467, 708, 1137, 1094, 1031, 831, 797, 603, 494, 490, 506, 418, 345, 245, 327, 464, 646, 702, 912]
    _ => list[]
};

//message analyser
def List<Int> ma_prediction() = case oracleScaling() {
    True => list[146, 401, 868, 1389, 2285, 2862, 3350, 3657, 3446, 2728, 2563, 2025, 1600, 1573, 1623, 1334, 1149, 775, 1066, 1411, 2179, 2685, 2824]
    _ => list[]
};
*/


//request prediction for oracle scaling IMAPS (COORD)

//message receiver
def List<Int> mr_prediction() = case oracleScaling() {
    True => list[114, 151, 154, 155, 156, 210, 295, 279, 200, 224, 204, 182, 275, 374, 515, 470, 337, 235, 134, 113]
    _ => list[]
};
//message parser
def List<Int> mp_prediction() = case oracleScaling() {
    True => list[114, 151, 154, 155, 156, 210, 247, 267, 200, 224, 204, 182, 249, 353, 477, 463, 337, 235, 134, 113]
    _ => list[]
};
//sentiment analyser
def List<Int> sa_prediction() = case oracleScaling() {
    True => list[279, 405, 403, 406, 418, 535, 575, 733, 518, 573, 502, 454, 577, 855, 1123, 1180, 855, 567, 335, 289]
    _ => list[]
};
//virus scanner
def List<Int> vs_prediction() = case oracleScaling() {
    True => list[246, 346, 313, 340, 339, 436, 471, 595, 415, 459, 409, 381, 480, 706, 926, 908, 660, 467, 263, 261]
    _ => list[]
};
//attachment manager
def List<Int> am_prediction() = case oracleScaling() {
    True => list[92, 266, 244, 256, 240, 266, 364, 441, 313, 358, 297, 284, 362, 471, 638, 721, 496, 348, 199, 197]
    _ => list[]
};
//image analyser
def List<Int> ia_prediction() = case oracleScaling() {
    True => list[92, 266, 244, 256, 240, 266, 364, 442, 313, 358, 297, 284, 362, 463, 638, 685, 496, 348, 199, 197]
    _ => list[]
};
//nsfw
def List<Int> nsfw_prediction() = case oracleScaling() {
    True => list[92, 263, 244, 256, 240, 266, 364, 443, 313, 358, 297, 284, 362, 462, 638, 674, 496, 348, 199, 197]
    _ => list[]
};
//image recognizer
def List<Int> ir_prediction() = case oracleScaling() {
    True => list[92, 263, 244, 256, 240, 266, 364, 443, 313, 358, 297, 284, 362, 462, 637, 674, 496, 348, 199, 197]
    _ => list[]
};

//message analyser
def List<Int> ma_prediction() = case oracleScaling() {
    True => list[429, 727, 849, 799, 804, 966, 1139, 1431, 1011, 1123, 1019, 907, 1134, 1567, 2046, 2328, 1668, 1169, 662, 603]
    _ => list[]
};


    //COORD diurnal load pattern
    /*def List<Int> actual_workload() = list[47,47,47,47,54,54,54,46,46,46,
                                  50,50,50,50,65,65,84,84,68,90,
                                  112,137,137,143,167,188,188,210,231,231,
                                  251,251,274,294,311,311,311,332,355,375,
                                  375,393,393,416,422,422,422,427,427,431,
                                  431,431,431,418,418,418,413,413,399,396,
                                  414,390,390,392,412,412,412,412,390,393,
                                  393,414,440,425,404,384,403,403,403,388,
                                  408,427,427,405,420,420,440,430,416,416,
                                  405,405,413,413,413,413,427,427,447,447,
                                  438,438,438,418,407,433,449,420,405,405,
                                  405,412,412,412,393,393,345,323,317,305,
                                  294,272,250,272,250,227,208,192,182,169,
                                  154,145,133,125,112,112,94,92,88,85,
                                  83,80,75,72,61,59,55,52,52,52,
                                  52,43,43,43,40,40,40,40,44,42,
                                  47,47,47,47,54,54,54,46,46,46];*/
                
    //COORD IMAPS
    def List<Int> actual_workload() = list[82, 84, 85, 90, 93, 96, 100, 104, 108, 114,
                                  118, 122, 128, 133, 138, 142, 147, 150, 150, 151,
                                  151, 152, 152, 153, 153, 153, 153, 153, 154, 154,
                                  154, 154, 154, 155, 155, 155, 155, 155, 155, 155,
                                  155, 155, 155, 155, 155, 155, 155, 156, 156, 156,
                                  156, 157, 157, 157, 157, 163, 173, 180, 196, 210,
                                  220, 234, 242, 246, 254, 261, 271, 280, 295, 287,
                                  279, 268, 258, 250, 242, 234, 225, 220, 215, 205,
                                  200, 196, 190, 187, 184, 187, 190, 193, 197, 200,
                                  203, 206, 209, 212, 216, 220, 224, 219, 214, 210,
                                  204, 192, 188, 184, 180, 175, 170, 165, 160, 157,
                                  154, 150, 152, 154, 156, 158, 162, 168, 174, 182,
                                  191, 200, 209, 219, 228, 237, 247, 256, 266, 275,
                                  284, 294, 303, 313, 322, 331, 341, 355, 369, 374,
                                  386, 398, 416, 427, 445, 455, 496, 515, 496, 480,
                                  470, 455, 440, 420, 399, 388, 378, 368, 358, 348,
                                  337, 327, 317, 307, 297, 286, 276, 266, 256, 246,
                                  235, 225, 215, 205, 195, 185, 175, 164, 155, 145,
                                  134, 124, 114, 104, 97, 96, 93, 88, 85, 84];
    //enron
    /*def List<Int> actual_workload() = list[10, 5, 2, 2, 25, 22, 17, 20, 22, 27,
                                  7, 17, 12, 50, 52, 30, 22, 17, 90, 120,
                                  40, 37, 35, 80, 75, 15, 165, 535, 497, 507,
                                  522, 507, 510, 557, 610, 617, 610, 675, 665, 640,
                                  635, 612, 602, 597, 575, 585, 560, 555, 597, 590,
                                  590, 590, 582, 542, 535, 557, 565, 587, 672, 710,
                                  715, 750, 760, 750, 755, 747, 725, 747, 737, 730,
                                  722, 732, 725, 727, 720, 725, 722, 745, 740, 735,
                                  682, 690, 650, 635, 625, 590, 550, 510, 515, 532,
                                  552, 545, 520, 507, 505, 502, 515, 510, 512, 510,
                                  500, 505, 505, 432, 425, 425, 422, 395, 392, 395,
                                  405, 392, 397, 377, 367, 327, 322, 312, 310, 340,
                                  320, 315, 320, 312, 305, 300, 297, 275, 280, 287,
                                  290, 287, 297, 310, 307, 305, 302, 312, 300, 297,
                                  297, 305, 312, 310, 322, 315, 312, 312, 275, 267,
                                  260, 260, 257, 250, 245, 230, 210, 227, 250, 247,
                                  232, 230, 217, 210, 200, 192, 187, 167, 152, 167,
                                  150, 137, 127, 65, 62, 55, 52, 50, 50, 50,
                                  45, 132, 130, 47, 92, 95, 150, 157, 255, 400,
                                  430, 440, 440, 445, 455, 475, 457, 447, 447, 420];*/
    //outliers
    /*def List<Int> actual_workload() = list[590, 590, 582, 542, 535, 557, 565, 587, 672, 710,
                                  715, 750, 760, 750, 755, 747, 725, 747, 737, 730,
                                  722, 732, 725, 727, 720, 725, 722, 745, 740, 735,
                                  682, 690, 650, 635, 625, 590, 550, 510, 515, 532,
                                  635, 612, 602, 597, 575, 585, 560, 555, 597, 590,
                                  10, 5, 2, 2, 25, 22, 17, 20, 22, 27,
                                  7, 17, 12, 50, 52, 30, 22, 17, 90, 120,
                                  40, 37, 35, 80, 75, 15, 165, 535, 497, 507,
                                  522, 507, 510, 557, 610, 617, 610, 675, 665, 640,
                                  552, 545, 520, 507, 505, 502, 515, 510, 512, 510,
                                  500, 505, 505, 432, 425, 425, 422, 395, 392, 395,
                                  405, 392, 397, 377, 367, 327, 322, 312, 310, 340,
                                  320, 315, 320, 312, 305, 300, 297, 275, 280, 287,
                                  290, 287, 297, 310, 307, 305, 302, 312, 300, 297,
                                  297, 305, 312, 310, 322, 315, 312, 312, 275, 267,
                                  260, 260, 257, 250, 245, 230, 210, 227, 250, 247,
                                  232, 230, 217, 210, 200, 192, 187, 167, 152, 167,
                                  150, 137, 127, 65, 62, 55, 52, 50, 50, 50,
                                  45, 132, 130, 47, 92, 95, 150, 157, 255, 400,
                                  430, 440, 440, 445, 455, 475, 457, 447, 447, 420];*/