module EmailProcessingPipelineArchitecture;

export *;
import * from ABS.DC;
import * from ABS.SmartDeploy;
import * from InvariantsDeployer;
import * from BaseScale;
import * from Scale1;
import * from Scale2;
import * from Scale3;
import * from Scale4;

//////////////////////////////////CLOUD PROVIDER/////////////////////////
[SmartDeployCloudProvider: "{\"c4_large\" : {\"cost\" : 100, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 2, \"Memory\" : 375, \"Bandwidth\" : 500, \"Speed\" : 10, \"Startupduration\" : 100}} , \"c4_xlarge\" : { \"cost\" : 199, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 4, \"Memory\" : 750, \"Bandwidth\" : 750, \"Speed\" : 20, \"Startupduration\" : 100}} , \"c4_2xlarge\" : { \"cost\" : 398, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 8, \"Memory\" : 1500, \"Bandwidth\" : 1000, \"Speed\" : 40, \"Startupduration\" : 100}}, \"c4_4xlarge\" : { \"cost\" : 796, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 16, \"Memory\" : 3000, \"Bandwidth\" : 2000, \"Speed\" : 80, \"Startupduration\" : 100}}}"]
///////////////////////////////////////////////////////////////////////

/////////////////////INVARIANTS ANNOTATION/////////////////////////////////////
/*
[ SmartDeploy : "{ \"id\":\"InvariantsDeployer\", \"specification\":\"MessageReceiver_LoadBalancer = 1 and MessageParser_LoadBalancer = 1 and HeaderAnalyser_LoadBalancer = 1 and LinkAnalyser_LoadBalancer = 1 and TextAnalyser_LoadBalancer = 1 and SentimentAnalyser_LoadBalancer = 1 and VirusScanner_LoadBalancer = 1 and AttachmentsManager_LoadBalancer = 1 and ImageAnalyser_LoadBalancer = 1 and NSFWDetector_LoadBalancer = 1 and ImageRecognizer_LoadBalancer = 1 and MessageAnalyser_LoadBalancer = 1 and forall ?x in DC: ( ?x.MessageAnalyser_LoadBalancer + ?x.MessageParser_LoadBalancer + ?x.HeaderAnalyser_LoadBalancer + ?x.LinkAnalyser_LoadBalancer + ?x.TextAnalyser_LoadBalancer + ?x.SentimentAnalyser_LoadBalancer + ?x.VirusScanner_LoadBalancer + ?x.AttachmentsManager_LoadBalancer + ?x.ImageAnalyser_LoadBalancer + ?x.NSFWDetector_LoadBalancer + ?x.ImageRecognizer_LoadBalancer + ?x.MessageAnalyser_LoadBalancer  > 0 impl (sum ?y in obj: ?x.?y) = 1)\", \"DC\":[ ], \"obj\":[{\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []} ], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[ \"local\"], \"add_method_priorities\":[], \"remove_method_priorities\":[] }" ]
*/

///////BASESCALE///////
/*
[SmartDeploy : "{\"id\":\"BaseScale\",\"specification\":\"MessageReceiver = 1 and MessageParser = 1 and HeaderAnalyser = 1 and LinkAnalyser = 1 and TextAnalyser = 1 and SentimentAnalyser = 2 and VirusScanner = 1 and AttachmentsManager = 1 and ImageAnalyser = 1 and NSFWDetector = 1 and ImageRecognizer = 1 and MessageAnalyser = 1 and forall ?x in DC: (?x.HeaderAnalyser + ?x.LinkAnalyser + ?x.TextAnalyser > 0 impl (sum ?y in obj: ?x.?y) = 1)\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]}, {\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/

//////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////SCALE 1 ANNOTATION////////////////////////////////////
/*
[ SmartDeploy : "{\"id\":\"Scale1\",\"specification\":\"MessageReceiver = 1 and MessageParser = 1 and HeaderAnalyser = 0 and LinkAnalyser = 0 and TextAnalyser = 0 and SentimentAnalyser = 1 and VirusScanner = 1 and AttachmentsManager = 0 and ImageAnalyser = 0 and NSFWDetector = 1 and ImageRecognizer = 1 and MessageAnalyser = 1\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]},{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////SCALE 2 ANNOTATION//////////////////////////////////////////////
/*
[ SmartDeploy : "{\"id\":\"Scale2\",\"specification\":\"MessageReceiver = 0 and MessageParser = 0 and HeaderAnalyser = 0 and LinkAnalyser = 0 and TextAnalyser = 0 and SentimentAnalyser = 3 and VirusScanner = 2 and AttachmentsManager = 1 and ImageAnalyser = 1 and NSFWDetector = 2 and ImageRecognizer = 2 and MessageAnalyser = 2\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]},{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////SCALE 3////////////////////////////////////////////////
/*
[ SmartDeploy : "{\"id\":\"Scale3\",\"specification\":\"MessageReceiver = 1 and MessageParser = 1 and HeaderAnalyser = 0 and LinkAnalyser = 0 and TextAnalyser = 0 and SentimentAnalyser = 2 and VirusScanner = 1 and AttachmentsManager = 0 and ImageAnalyser = 0 and NSFWDetector = 1 and ImageRecognizer = 1 and MessageAnalyser = 1\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]},{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/
//////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////SCALE 4////////////////////////////////////////////////
/*
[ SmartDeploy : "{\"id\":\"Scale4\",\"specification\":\"MessageReceiver = 1 and MessageParser = 1 and HeaderAnalyser = 0 and LinkAnalyser = 0 and TextAnalyser = 0 and SentimentAnalyser = 2 and VirusScanner = 2 and AttachmentsManager = 1 and ImageAnalyser = 1 and NSFWDetector = 2 and ImageRecognizer = 2 and MessageAnalyser = 2\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]},{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/
//////////////////////////////////////////////////////////////////////////////////////////////


exception MessageNotInstantiatedInTheMap;

interface MessageResultInterface{
  Unit insertRes(String r);
  Int getActivityWaiting();
  String getRes();
}

class MessageResult(Int n) implements MessageResultInterface {
  Int nWaiting = n;
  String messId = "";
  String res = "";

  Unit insertRes(String r) {
    res = res + r + "\n";
    nWaiting = nWaiting - 1;
  }

  Int getActivityWaiting() {return nWaiting;}

  String getRes() {return res;}

}

interface MessageReceiver_LoadBalancerInterface {
    Unit connectInstance(MessageReceiverInterface newInstance);
    MessageReceiverInterface disconnectInstance();
    Unit newMessage(String mailData);
    Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"MessageReceiver_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageReceiverInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageReceiverInterface\"}}]}]}"]
class MessageReceiver_LoadBalancer(DBInterface db) implements MessageReceiver_LoadBalancerInterface {
  List<MessageReceiverInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;
  Int pending = 0;

  Unit connectInstance(MessageReceiverInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  MessageReceiverInterface disconnectInstance(){
    MessageReceiverInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newMessage(String mailData){
    db.messageArrived();
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageReceiverInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!newMessage(mailData, this);
    } else {db.messageLoss("");}
  }

  Unit removeMessage() {pending = pending - 1;}

}

interface MessageReceiverInterface {
    Unit newMessage(String mailData, MessageReceiver_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"MessageReceiver\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageParser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class MessageReceiver(MessageParser_LoadBalancerInterface parserLoadBalancer) implements MessageReceiverInterface {
  Int speed_res = 5;
  Int mcl = 116;
  Unit newMessage (String mailData, MessageReceiver_LoadBalancerInterface balancer) {
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    parserLoadBalancer.newRequest(mailData);
  }
}


interface MessageParser_LoadBalancerInterface {
    Unit connectInstance(MessageParserInterface newInstance);
    MessageParserInterface disconnectInstance();
    Unit newRequest (String mailData);
    Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"MessageParser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageParserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageParserInterface\"}}]}]}"]
class MessageParser_LoadBalancer(DBInterface db) implements MessageParser_LoadBalancerInterface {
  List<MessageParserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;
  Int pending = 0;
  Int id = 0;

  Unit connectInstance(MessageParserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  MessageParserInterface disconnectInstance(){
    MessageParserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String mailData){
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageParserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!parseMessage(mailData, this, id);
      id = id + 1;
    } else {db.messageLoss("");}
  }

  Unit removeMessage() {pending = pending - 1;}

}

interface MessageParserInterface {
  Unit parseMessage (String mailData, MessageParser_LoadBalancerInterface balancer, Int id);
}

[SmartDeployCost : "{\"class\" : \"MessageParser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"HeaderAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"LinkAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"TextAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"VirusScanner_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"DBInterface\"}],\"methods\" : []}]}"]
class MessageParser(HeaderAnalyser_LoadBalancerInterface headerAnalyserLoadBalancer, LinkAnalyser_LoadBalancerInterface linkAnalyserLoadBalancer, TextAnalyser_LoadBalancerInterface textAnalyserLoadBalancer, VirusScanner_LoadBalancerInterface virusScannerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer, DBInterface db) implements MessageParserInterface {
  Int speed_res = 5;
  Int mcl = 110;
  Unit parseMessage (String mailData, MessageParser_LoadBalancerInterface balancer, Int id){
		//cost to parse the message
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    String headers = mailData + "_NetworkHeaders";
    String sender = mailData + "_Sender";
    String messageHeader = mailData + "_MessageHeader";
    String messageBody = mailData + "_MessageBody";
    Set<String> links = set[];
    Set<String> attachments = set[];
    Int n_links = random(11);
    Int n_attachments = random(5);
    Int i = 0;
    while (i < n_links) {
      links = insertElement(links, mailData + "_Link" + toString(i));
      i = i + 1;
    }
    i = 0;
    while (i < n_attachments) {
      attachments = insertElement(attachments, mailData + "_Attachment" + toString(i));
      i = i + 1;
    }
    //insert message information
    String messageId = toString(id);
    db.insertMessageInformation(messageId, n_attachments);
    headerAnalyserLoadBalancer.newRequest(headers, messageId);
    if(n_links > 0){linkAnalyserLoadBalancer.newRequest(links, messageId);}
    else{messageAnalyserLoadBalancer.insertResult("", messageId);}
    if(messageHeader != "" || messageBody != ""){textAnalyserLoadBalancer.newRequest(messageHeader, messageBody, messageId);}
    else{messageAnalyserLoadBalancer.insertResult("", messageId);}
    while(size(attachments)>0){
      String attach = take(attachments);
      attachments = remove(attachments, attach);
      virusScannerLoadBalancer.newRequest(attach, messageId);
    }
  }
}


interface HeaderAnalyser_LoadBalancerInterface {
    Unit connectInstance(HeaderAnalyserInterface newInstance);
    HeaderAnalyserInterface disconnectInstance();
    Unit newRequest (String headers, String messageId);
}

//[SmartDeployCost : "{\"class\" : \"HeaderAnalyser_LoadBalancer\", \"scenarios\" : [{ \"name\" : \"default\", \"provide\" : -1, \"cost\" : { \"Cores\" : 2, \"Memory\" : 200 }, \"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{ \"add\" : { \"name\" : \"connectInstance\", \"param_type\" : \"HeaderAnalyserInterface\" }, \"remove\" : { \"name\" : \"disconnectInstance\", \"return_type\": \"HeaderAnalyserInterface\" }}]}]}"]
class HeaderAnalyser_LoadBalancer(DBInterface db)  implements HeaderAnalyser_LoadBalancerInterface {
  List<HeaderAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;

  Unit connectInstance(HeaderAnalyserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  HeaderAnalyserInterface disconnectInstance(){
    HeaderAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String headers, String messageId){
      HeaderAnalyserInterface selectedInstance = nth(instancesConnected, 0);
      selectedInstance.analyzeHeaders(headers, messageId);
  }
}

interface HeaderAnalyserInterface {
  Unit analyzeHeaders (String headers, String messageId);
}

[SmartDeployCost : "{\"class\" : \"HeaderAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class HeaderAnalyser(MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements HeaderAnalyserInterface {

  Unit analyzeHeaders (String headers, String messageId) {
    String res = "Results of HeaderAnalysis (" + headers + ") by HeaderAnalyser in " + toString(thisDC());
    messageAnalyserLoadBalancer.insertResult(res, messageId);
  }
}

interface LinkAnalyser_LoadBalancerInterface {
  Unit connectInstance(LinkAnalyserInterface newInstance);
  LinkAnalyserInterface disconnectInstance();
  Unit newRequest (Set<String> links, String messageId);
}

//[SmartDeployCost : "{\"class\" : \"LinkAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"LinkAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"LinkAnalyserInterface\"}}]}]}"]
class LinkAnalyser_LoadBalancer(DBInterface db)  implements LinkAnalyser_LoadBalancerInterface {
  List<LinkAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;

  Unit connectInstance(LinkAnalyserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  LinkAnalyserInterface disconnectInstance(){
    LinkAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (Set<String> links, String messageId){
    LinkAnalyserInterface selectedInstance = nth(instancesConnected, 0);
    selectedInstance.analyzeLink(links, messageId);
  }
}

interface LinkAnalyserInterface {
  Unit analyzeLink (Set<String> links, String messageId);
}

[SmartDeployCost : "{\"class\" : \"LinkAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class LinkAnalyser(MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements LinkAnalyserInterface {
  Unit analyzeLink (Set<String> links, String messageId) {
    String res = "Results of LinkAnalysis by LinkAnalyser in " + toString(thisDC());
    messageAnalyserLoadBalancer.insertResult(res, messageId);
  }
}

interface TextAnalyser_LoadBalancerInterface {
  Unit connectInstance(TextAnalyserInterface newInstance);
  TextAnalyserInterface disconnectInstance();
  Unit newRequest (String messageHeader, String messageBody, String messageId);
}

//[SmartDeployCost : "{\"class\" : \"TextAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"TextAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"TextAnalyserInterface\"}}]}]}"]
class TextAnalyser_LoadBalancer(DBInterface db)  implements TextAnalyser_LoadBalancerInterface {
  List<TextAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;

  Unit connectInstance(TextAnalyserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  TextAnalyserInterface disconnectInstance(){
    TextAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String messageHeader, String messageBody, String messageId){
    TextAnalyserInterface selectedInstance = nth(instancesConnected, 0);
    selectedInstance!analyzeText(messageHeader, messageBody, messageId);
  }
}

interface TextAnalyserInterface {
  Unit analyzeText (String messageHeader, String messageBody, String messageId);
}

[SmartDeployCost : "{\"class\" : \"TextAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"SentimentAnalyser_LoadBalancerInterface\" },{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class TextAnalyser(SentimentAnalyser_LoadBalancerInterface sentimentAnalayserLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements TextAnalyserInterface {

  Unit analyzeText (String messageHeader, String messageBody, String messageId) {
    Bool refused = False;
    if(messageHeader != ""){}//message header analysis
    String sentimentAnalysisResults = "";
    if(messageBody != ""){
      Int n_text_blocks = random(4) + 1;
      List<Maybe<Fut<String>>> futList = list[];
      while (length(futList) < n_text_blocks) {
        Maybe<Fut<String>> currentFuture = sentimentAnalayserLoadBalancer.newRequest(messageBody + "_block" + toString(length(futList)), messageId);
        futList = appendright(futList, currentFuture);
      }
			while (futList != Nil) {
        //wait the results from all sentiment analysers
        Maybe<Fut<String>> maybe = head(futList);
        futList = tail(futList);
        if(!isJust(maybe)) {
          refused = True;
          futList = Nil;
        } else {
          Fut<String> currentFuture = fromJust(maybe);
          await currentFuture?;
          String currentResult = currentFuture.get;
          sentimentAnalysisResults = sentimentAnalysisResults + "\n\t\t" + currentResult;
        }
			}
    }
    String res = "Results of TextAnalysis by TextAnalyser in " + toString(thisDC()) + " on: \n \t\t" + messageHeader + "\n \t\t" + messageBody + "\n \t\tSentimentAnalysis return:" + sentimentAnalysisResults;
    if(!refused){messageAnalyserLoadBalancer.insertResult(res, messageId);}
  }
}

interface SentimentAnalyser_LoadBalancerInterface {
  Unit connectInstance(SentimentAnalyserInterface newInstance);
  SentimentAnalyserInterface disconnectInstance();
  Maybe<Fut<String>> newRequest (String messageBody, String id);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"SentimentAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"SentimentAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"SentimentAnalyserInterface\"}}]}]}"]
class SentimentAnalyser_LoadBalancer(DBInterface dbObj)  implements SentimentAnalyser_LoadBalancerInterface {
  List<SentimentAnalyserInterface> instancesConnected = list[];
  Int pending = 0;
  Int nextInstance = -1;
  Rat buffer_size = 50 * 5/2;

  Unit connectInstance(SentimentAnalyserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  SentimentAnalyserInterface disconnectInstance(){
    SentimentAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Maybe<Fut<String>> newRequest (String messageBody, String messageId){
      Maybe<Fut<String>> res = Nothing;
      if(pending < buffer_size) {
        pending = pending + 1;
        nextInstance = (nextInstance + 1) % length(instancesConnected);
        SentimentAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
        Fut<String> fut = selectedInstance!analyzeSentiments(messageBody,this);
        res = Just(fut);
      } else {dbObj.messageLoss(messageId);}
      return res;
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface SentimentAnalyserInterface {
  String analyzeSentiments(String messageBody, SentimentAnalyser_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"SentimentAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 4,\"Memory\" : 250},\"sig\" : [],\"methods\" : []}]}"]
class SentimentAnalyser() implements SentimentAnalyserInterface {
  Int speed_res = 20;
  Int mcl = 100;

  String analyzeSentiments (String messageBody, SentimentAnalyser_LoadBalancerInterface balancer){
    //analyze message body and return the results
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    return "SentimentAnalysis result of: " + messageBody + " by SentimentAnalyser in " + toString(thisDC());
  }
}

interface VirusScanner_LoadBalancerInterface {
  Unit connectInstance(VirusScannerInterface newInstance);
  VirusScannerInterface disconnectInstance();
  Unit newRequest (String attachment, String messageId);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"VirusScanner_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"VirusScannerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"VirusScannerInterface\"}}]}]}"]
class VirusScanner_LoadBalancer(DBInterface db)  implements VirusScanner_LoadBalancerInterface {
  List<VirusScannerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 2;

  Unit connectInstance(VirusScannerInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  VirusScannerInterface disconnectInstance(){
    VirusScannerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String attachment, String messageId){
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      VirusScannerInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!scanAttachment(attachment, messageId, this);
    } else {db.messageLoss(messageId);}
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface VirusScannerInterface {
  Unit scanAttachment (String attachment, String messageId, VirusScanner_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"VirusScanner\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 4,\"Memory\" : 600},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"AttachmentsManager_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class VirusScanner(AttachmentsManager_LoadBalancerInterface attachmentsManagerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements VirusScannerInterface {
  Int speed_res = 20;
  Int mcl = 120;


  Unit scanAttachment (String attachment, String messageId, VirusScanner_LoadBalancerInterface balancer){
    //scan attachment
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Bool virusFound = random(4) == 0;
    if(virusFound){messageAnalyserLoadBalancer.insertResult("VirusFound from VirusScanner in attachment: " + attachment + " by VirusScanner in " + toString(thisDC()), messageId);}
    else{attachmentsManagerLoadBalancer.newRequest(attachment, messageId);}
  }
}

interface AttachmentsManager_LoadBalancerInterface {
  Unit connectInstance(AttachmentsManagerInterface newInstance);
  AttachmentsManagerInterface disconnectInstance();
  Unit newRequest (String attachment, String messageId);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"AttachmentsManager_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"AttachmentsManagerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"AttachmentsManagerInterface\"}}]}]}"]
class AttachmentsManager_LoadBalancer(DBInterface db)  implements AttachmentsManager_LoadBalancerInterface {
  List<AttachmentsManagerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;

  Unit connectInstance(AttachmentsManagerInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  AttachmentsManagerInterface disconnectInstance(){
    AttachmentsManagerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String attachment, String messageId){
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      AttachmentsManagerInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!manageAttachments(attachment, messageId, this);
    } else {db.messageLoss(messageId);}
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface AttachmentsManagerInterface {
  Unit manageAttachments(String attachment, String messageId, AttachmentsManager_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"AttachmentsManager\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [ { \"kind\" : \"require\",\"type\" : \"ImageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class AttachmentsManager(ImageAnalyser_LoadBalancerInterface imageAnalyserLoadBalancer) implements AttachmentsManagerInterface {
  Int speed_res = 5;
  Int mcl = 231;

  Unit manageAttachments(String attachment, String messageId, AttachmentsManager_LoadBalancerInterface balancer){
    //cost to decide the extension/type of an attachment
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    imageAnalyserLoadBalancer.newRequest(attachment, messageId);
  }
}

interface ImageAnalyser_LoadBalancerInterface {
  Unit connectInstance(ImageAnalyserInterface newInstance);
  ImageAnalyserInterface disconnectInstance();
  Unit newRequest (String image, String messageId);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"ImageAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"ImageAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"ImageAnalyserInterface\"}}]}]}"]
class ImageAnalyser_LoadBalancer(DBInterface db)  implements ImageAnalyser_LoadBalancerInterface {
  List<ImageAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;
  Unit connectInstance(ImageAnalyserInterface newInstance){
    instancesConnected = appendright(instancesConnected, newInstance);
  }
  ImageAnalyserInterface disconnectInstance(){
    ImageAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String image, String messageId){
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      ImageAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!analyzeImage(image, messageId, this, db);
    } else {db.messageLoss(messageId);}
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface ImageAnalyserInterface {
  Unit analyzeImage (String image, String messageId, ImageAnalyser_LoadBalancerInterface balancer,  DBInterface db);
}

[SmartDeployCost : "{\"class\" : \"ImageAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 200},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"NSFWDetector_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"ImageRecognizer_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class ImageAnalyser(NSFWDetector_LoadBalancerInterface nsfwDetectorLoadBalancer, ImageRecognizer_LoadBalancerInterface imageRecognizerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements ImageAnalyserInterface {
  Int speed_res = 5;
  Int mcl = 231;

  Unit analyzeImage (String image, String messageId, ImageAnalyser_LoadBalancerInterface balancer, DBInterface db){
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Maybe<Fut<Bool>> maybeNSFW = nsfwDetectorLoadBalancer.newRequest(image, messageId);
    Maybe<Fut<String>> maybeImageCategory = imageRecognizerLoadBalancer.newRequest(image, messageId);
    if(isJust(maybeNSFW) && isJust(maybeImageCategory)) {
      Fut<Bool> futNSFW = fromJust(maybeNSFW);
      await futNSFW?;
      Bool nsfwResult = futNSFW.get;
      Fut<String> futImageCategory = fromJust(maybeImageCategory);
      await futImageCategory?;
      String imageRecognitionResult = futImageCategory.get;
      String res = "";
      if(nsfwResult){res = "Image (" + image + ") not safe for work by ImageAnalyser in " + toString(thisDC());}
      else{res = "Results of ImageAnalysis (" + image + ") - " + imageRecognitionResult + " by ImageAnalyser in " + toString(thisDC());}
      messageAnalyserLoadBalancer.insertResult(res, messageId);
    }
  }
}

interface NSFWDetector_LoadBalancerInterface {
  Unit connectInstance(NSFWDetectorInterface newInstance);
  NSFWDetectorInterface disconnectInstance();
  Maybe<Fut<Bool>>newRequest (String image, String id);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"NSFWDetector_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"NSFWDetectorInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"NSFWDetectorInterface\"}}]}]}"]
class NSFWDetector_LoadBalancer(DBInterface db)  implements NSFWDetector_LoadBalancerInterface {
  List<NSFWDetectorInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;

  Unit connectInstance(NSFWDetectorInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  NSFWDetectorInterface disconnectInstance(){
    NSFWDetectorInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Maybe<Fut<Bool>> newRequest (String image, String id){
    Maybe<Fut<Bool>> res = Nothing;
    if(pending < buffer_size) {
      pending = pending + 1;
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      NSFWDetectorInterface selectedInstance = nth(instancesConnected, nextInstance);
      Fut<Bool> fut = selectedInstance!nsfwDetection(image, this);
      res = Just(fut);
    } else {db.messageLoss(id);}
    return res;
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface NSFWDetectorInterface {
  Bool nsfwDetection(String image, NSFWDetector_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"NSFWDetector\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 6,\"Memory\" : 800},\"sig\" : [],\"methods\" : []}]}"]
class NSFWDetector() implements NSFWDetectorInterface {
  Int yesOrNot = -1;
  Int speed_res = 30;
  Int mcl = 90;
  Bool nsfwDetection(String image, NSFWDetector_LoadBalancerInterface balancer){
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    yesOrNot = yesOrNot + 1;
    return yesOrNot%3 == 0;
  }
}

interface ImageRecognizer_LoadBalancerInterface {
  Unit connectInstance(ImageRecognizerInterface newInstance);
  ImageRecognizerInterface disconnectInstance();
  Maybe<Fut<String>> newRequest(String image, String id);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"ImageRecognizer_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"ImageRecognizerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"ImageRecognizerInterface\"}}]}]}"]
class ImageRecognizer_LoadBalancer(DBInterface db)  implements ImageRecognizer_LoadBalancerInterface {
  List<ImageRecognizerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;

  Unit connectInstance(ImageRecognizerInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  ImageRecognizerInterface disconnectInstance(){
    ImageRecognizerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Maybe<Fut<String>> newRequest (String image, String id){
    Maybe<Fut<String>> res = Nothing;
    if(pending < buffer_size) {
      pending = pending + 1;
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      ImageRecognizerInterface selectedInstance = nth(instancesConnected, nextInstance);
      Fut<String> fut = selectedInstance!recognizeImage(image, this);
      res = Just(fut);
    } else {db.messageLoss(id);}
    return res;
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface ImageRecognizerInterface {
  String recognizeImage(String image, ImageRecognizer_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"ImageRecognizer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 6,\"Memory\" : 800},\"sig\" : [],\"methods\" : []}]}"]
class ImageRecognizer() implements ImageRecognizerInterface {
  Int speed_res = 30;
  Int mcl = 90;
  String recognizeImage(String image, ImageRecognizer_LoadBalancerInterface balancer){
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Int category = random(9);
    return "Category Recognized: " + toString(category) + " by ImageRecognizer in " + toString(thisDC());
  }
}

interface MessageAnalyser_LoadBalancerInterface {
  Unit connectInstance(MessageAnalyserInterface newInstance);
  MessageAnalyserInterface disconnectInstance();
	Unit insertResult(String res, String id);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"MessageAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageAnalyserInterface\"}}]}]}"]
class MessageAnalyser_LoadBalancer(DBInterface db)  implements MessageAnalyser_LoadBalancerInterface {
  List<MessageAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 5;
  Int pending = 0;

  Unit connectInstance(MessageAnalyserInterface newInstance){instancesConnected = appendright(instancesConnected, newInstance);}

  MessageAnalyserInterface disconnectInstance(){
    MessageAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit insertResult(String res, String id){
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!insertResult(res, id, this);
    } else {db.messageLoss(id);}
	}

  Unit removeMessage() {pending = pending - 1;}
}

interface MessageAnalyserInterface {
    Unit insertResult(String res, String id, MessageAnalyser_LoadBalancerInterface balancer);
}

[SmartDeployCost : "{\"class\" : \"MessageAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 300},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"DBInterface\" }],\"methods\" : []}]}"]
class MessageAnalyser(DBInterface db) implements MessageAnalyserInterface {
  Int speed_res = 5;
  Int mcl = 300;

  Unit insertResult(String res, String id, MessageAnalyser_LoadBalancerInterface balancer){
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
		Int numberOfActivityWaiting = db.insertResult(res, id);
    if(numberOfActivityWaiting == 0){this.takeFinalDecision(id);}
  }

  Unit takeFinalDecision(String messageId){
    //use the information in the db for messageId to take the final decision
    MessageResultInterface finalResults = db.returnMessageResults(messageId);
    String res = finalResults.getRes();
    String printString = "";
    printString = printString + 	"Results of message \"" + messageId + "\" analysis:" 	  + "\n";
    printString = printString +    "\t" + res;
  }
}

interface DBInterface {
  Unit messageArrived();
  Unit insertMessageInformation (String messageId, Int attachmentsNumber);
  Int insertResult(String res, String id);
  MessageResultInterface returnMessageResults(String messageId);
  Int get_inbound_workload();
  Int get_one_sec_workload();
  Int messageCompleted();
  Float returnAverageAnalysisTime();
  Unit resetMetrics();
  Unit one_sec_timeout();
  Int rejectedMessages();
  Unit messageLoss(String messageId);
}

class DB() implements DBInterface {
  Map<String,Pair<MessageResultInterface,Rat>> messageInfo = map[];
  Int inbound_workload = 0;
	Rat totalTime = 0;
  Int totalMessages = 0;
  Int rejected = 0;
  Int one_sec_workload = 0;

  Unit messageLoss(String messageId) {
    if(messageId == "") {rejected = rejected + 1;}
    else if(isJust(lookup(messageInfo,messageId))) {rejected = rejected + 1; messageInfo = removeKey(messageInfo, messageId);}
  }

  Unit messageArrived() {
    inbound_workload = inbound_workload + 1;
    one_sec_workload = one_sec_workload + 1;
  }

  Int get_inbound_workload(){return inbound_workload;}

  Int get_one_sec_workload() {return one_sec_workload;}

  Int messageCompleted() {return totalMessages;}

  Int rejectedMessages() {return rejected;}

  Unit insertMessageInformation (String messageId, Int attachmentsNumber){
    MessageResultInterface newResults = new MessageResult(3+attachmentsNumber);
		messageInfo = insert(messageInfo,Pair(messageId,Pair(newResults,timeValue(now()))));
  }

  Int insertResult(String res, String id){
    Int numberOfActivityWaiting = -1;
    Maybe<Pair<MessageResultInterface,Rat>> maybe = lookup(messageInfo, id);
    if(isJust(maybe)){
      MessageResultInterface actualResults = fst(fromJust(maybe));
      Rat analysisTime = snd(fromJust(maybe));
      actualResults.insertRes(res);
      numberOfActivityWaiting = actualResults.getActivityWaiting();
    }
    return numberOfActivityWaiting;
  }

  MessageResultInterface returnMessageResults(String messageId){
    MessageResultInterface messageResults = null;
    Maybe<Pair<MessageResultInterface,Rat>> maybe = lookup(messageInfo, messageId);
    if(isJust(maybe)){
      messageResults = fst(fromJust(maybe));
      Rat startTime = snd(fromJust(maybe));
      messageInfo = removeKey(messageInfo, messageId);
      totalTime = totalTime + (timeValue(now()) - startTime);
      totalMessages = totalMessages + 1;
    }
    return messageResults;
  }

  Float returnAverageAnalysisTime(){
    Rat averageTime = 1000000;
    if(totalMessages != 0){averageTime = totalTime/totalMessages;}
    return float(averageTime);
  }

  Unit one_sec_timeout() {one_sec_workload = 0;}

  Unit resetMetrics(){
    totalMessages = 0;
    totalTime = 0;
    inbound_workload = 0;
    rejected = 0;
  }
}


interface WrapperScaleInterface {
  List<DeploymentComponent> getDeploymentComponent();
  Int getDeplTimes();
	Unit deploy();
	Unit undeploy();
  Int getDeployedInstances();
}

class WrapperScale(Scale1 s1, Scale2 s2, Scale3 s3, Scale4 s4, Int nInst) implements WrapperScaleInterface{

  Int deplTimes = 0;

  List<DeploymentComponent> getDeploymentComponent(){
    List<DeploymentComponent> res = Nil;
    if (s4 != null){res = s4.getDeploymentComponent();}
    else if(s3 != null) {res = s3.getDeploymentComponent();}
    else if(s2 != null){res = s2.getDeploymentComponent();}
    else {res = s1.getDeploymentComponent();}
    return res;
  }

  Unit deploy(){
    if(s4 != null) {s4!deploy();}
    else if(s3 != null){s3!deploy();}
    else if(s2 != null){s2!deploy();}
    else{s1!deploy();}
    deplTimes = deplTimes + 1;
  }

  Unit undeploy(){
    if(s4 != null){s4!undeploy();}
    else if(s3 != null){s3!undeploy();}
    else if(s2 != null){s2!undeploy();}
    else{s1!undeploy();}
    deplTimes = deplTimes - 1;
  }

  Int getDeplTimes() {return deplTimes;}

  Int getDeployedInstances() {return nInst;}
}

interface MonitorInterface {}

//this class has an active behaviour so the monitoring operations start when the object is created in an automatic way
class Monitor(ScalerServiceInterface scaler, DBInterface db, Int windowDim, Int kbig, Int k, Int ratio, List<Int> conf) implements MonitorInterface {
  //dimension of the time window for monitoring controls
  Int monitoringWindowDimension = windowDim;
  Int time = 0;
  List<Int> current_config = conf;


  List<Int> inbound_workload_list= list[
                       50, 62, 0, 75, 62, 40, 0, 27, 47, 92,
                       45, 37, 55, 60, 72, 7, 267, 512, 485, 522,
                       520, 522, 512, 540, 575, 570, 575, 632, 620, 630,
                       617, 610, 577, 600, 592, 555, 550, 570, 567, 562,
                       562, 562, 550, 537, 537, 552, 565, 580, 640, 665,
                       665, 737, 725, 722, 735, 725, 695, 732, 737, 732,
                       715, 690, 712, 707, 710, 695, 697, 730, 722, 727,
                       670, 572, 585, 580, 580, 575, 540, 525, 522, 520,
                       517, 525, 502, 507, 507, 507, 500, 500, 500, 487,
                       500, 470, 455, 427, 427, 420, 407, 400, 400, 392,
                       425, 430, 397, 367, 365, 337, 315, 325, 332, 322,
                       312, 315, 317, 315, 312, 317, 292, 280, 282, 272,
                       272, 275, 287, 305, 305, 297, 305, 317, 330, 320,
                       312, 325, 322, 320, 312, 327, 310, 300, 280, 262,
                       262, 257, 252, 252, 247, 260, 240, 230, 220, 230,
                       222, 232, 217, 217, 190, 190, 180, 175, 175, 175,
                       187, 115, 97, 82, 82, 65, 55, 35, 80, 77,
                       92, 140, 150, 37, 117, 82, 155, 147, 262, 395,
                       402, 437, 430, 447, 437, 452, 475, 480, 442, 402,
                       25, 2, 12, 32, 2, 0, 10, 20, 0, 25];
  Int sum (Int n){
    Int i = time - n;
    Int sum = 0;
    while(i < time){
      if(i < length(inbound_workload_list)) sum = sum + nth(inbound_workload_list,i);
      i = i + 1;
    }
    return sum;
  }

  Rat compute_weight(List<Int> pred_conf, List<Int> actual_conf) {
    List<Rat> dev_factors = list[12/53, 24/53, 9/53, 8/53];
    Int i = length(pred_conf) - 1;
    Rat weight = 0;
    while(i > 0) {
      Rat pred_score = nth(pred_conf,i) * nth(dev_factors,i);
      Rat react_score = -nth(actual_conf, i) * nth(dev_factors,i);
      weight = weight + pred_score + react_score;
      i = i - 1;
    }
    if(abs(weight) > 1) weight = 1;
    return abs(weight);
  }

  Pair<Rat,Rat> find_maxes() {
    Rat max_pred = 0;
    Rat max_true = 0;
    Int i = 0;
    //wait the monitoring time
    while(i < ratio) {
      await duration(monitoringWindowDimension/ratio, monitoringWindowDimension/ratio);
      Rat chunk_pred = nth(inbound_workload_list, (i + time) % length(inbound_workload_list));
      Rat chunk_real = db.get_one_sec_workload();
      db.one_sec_timeout();
      if(chunk_pred > max_pred) max_pred = chunk_pred;
      if(chunk_real > max_true) max_true = chunk_real;
      i = i + 1;
    }
    return Pair(max_pred, max_true);
  }

	// active behavior
	Unit run() {
    while(time < 200){
      Pair<Rat,Rat> maxes = this.find_maxes();
      Rat max_pred = fst(maxes);
      Rat max_true = snd(maxes);
      time = time + ratio;
      List<Int> actual_conf = scaler.computeConfiguration(max_true);
      Rat react_score = this.compute_weight(current_config, actual_conf);
      Rat pred_score = 1 - react_score;
      Rat scale_target = (react_score * max_true) + (pred_score * max_pred);
      Float averageAnalysisTime = db.returnAverageAnalysisTime();
      Rat completed = db.messageCompleted();
      Rat rejected = db.rejectedMessages();
      Rat totalMsg = db.get_inbound_workload();
      Rat totalCost = scaler.computeTotalCost(ratio);
      Rat nInst = scaler.computeInstanceNumber();
      Rat mcl = scaler.getSystemMCL();
      String toPrint = toString(time) + "  " + toString(float(100/3) * averageAnalysisTime) + " #next_max: " + toString(max_pred) + " curr_max: " + toString(max_true) + " scale_target: " + toString(float(scale_target)) + " TOT: " + toString(totalMsg) + " COMP: " + toString(completed) + " REJ: " + toString(rejected) + " SUPP: " + toString(mcl) + " COST: " + toString(float(totalCost)) + " INST: " + toString(nInst);
      if(scale_target - (mcl - kbig) > k || (mcl - kbig) - scale_target > k) {
        current_config = scaler.computeConfiguration(scale_target);
        scaler.scale(current_config);
      }
      String scalingAct = scaler.getScalingActions();
      toPrint = toPrint + scalingAct;
      db.resetMetrics();
      println(toPrint);
    }
  }
}


interface ScalerServiceInterface {
  Unit insertScalingElements(List<Int> components, WrapperScaleInterface scalingObj, String scalingName);
  Unit scale(List<Int> configDeltas);
  Rat getSystemMCL();
  String getScalingActions();
  Rat computeInstanceNumber();
  Rat computeTotalCost(Int ratio);
  List<Int> computeConfiguration(Rat inbound_workload);
}

class ScalerService(Int kbig, Rat initialCost, Int initInstancesNumber) implements ScalerServiceInterface {

  List<Int> mcls = list[116, 110, 100, 120, 231, 231, 90, 90, 300];
  List<Rat> mfs = list[1, 1, 5/2, 2, 3/2, 3/2, 3/2, 3/2, 5];
  List<Int> baseConfig = list[1, //MR
                              1, //MP
                              //0, //HA
                              //0, //LA
                              //0, //TA
                              2, //SA
                              1,  //VS
                              1, //AM
                              1, //IA
                              1,  //NSFW
                              1,  //IR
                              1]; //MA
  List<List<Int>> scaleComponents = list[];
  List<Int> deployedDeltas = list[];
  List<WrapperScaleInterface> orchestrationDeltas = list[];
  List<String> scaleNames = list[];
  List<Int> scalingTrace = list[];
  List<Int> printableconfig = list[];
  Rat mcl = 0;
  Int numScales = 0;
  String scalingAct = "";

  Unit insertScalingElements(List<Int> components, WrapperScaleInterface scalingObj, String scalingName) {
    scaleComponents = appendright(scaleComponents, components);
    deployedDeltas = appendright(deployedDeltas, 0);
    orchestrationDeltas = appendright(orchestrationDeltas, scalingObj);
    scalingTrace = appendright(scalingTrace, 0);
    scaleNames = appendright(scaleNames, scalingName);
    numScales = numScales + 1;
  }

  List<Int> computeConfiguration(Rat inbound_workload) {
    List<Int> configDeltas = this.createEmpty(numScales);
    printableconfig = configDeltas;
    List<Int> config = baseConfig;
    mcl = this.mcl(config);
    Bool configFound = (mcl - kbig) - inbound_workload  >= 0;
    while(!configFound) {
      List<Int> candidateConfig = baseConfig;
      Int i = -1;
      while(i < numScales - 1 && !configFound) {
        i = i + 1;
        candidateConfig = this.vSum(config, nth(scaleComponents,i));
        mcl = this.mcl(candidateConfig);
        configFound = (mcl - kbig) - inbound_workload  >= 0;
      }
      config = candidateConfig;
      printableconfig = this.incrementValue(i,printableconfig);
      configDeltas = this.addDeltas(i,configDeltas);
    }
    return configDeltas;
  }


  Unit scale(List<Int> configDeltas) {
    this.reconfigure(deployedDeltas, configDeltas);
    scalingAct = this.recordAction(scalingTrace, printableconfig);
    deployedDeltas = configDeltas;
    scalingTrace = printableconfig;
  }

  Rat getSystemMCL() {return mcl;}

  String getScalingActions() {
    String tmp = scalingAct;
    if(scalingAct != "") scalingAct = "";
    return tmp;
  }

  Rat computeTotalCost(Int ratio) {
    Rat totalCost = initialCost;
    foreach(orch in orchestrationDeltas) {
      WrapperScaleInterface wrapper = orch;
      Rat scaleCost = this.computeCostPerScaling(wrapper);
      Int deplTimes = wrapper.getDeplTimes();
      scaleCost = scaleCost * deplTimes;
      totalCost = totalCost + scaleCost;
    }
    return totalCost*ratio/(1000*3600);
  }

  Rat computeInstanceNumber() {
    Rat nInstances = initInstancesNumber;
    foreach(orch in orchestrationDeltas) {
      WrapperScaleInterface wrapper = orch;
      Int n = wrapper.getDeployedInstances();
      Int deplTimes = wrapper.getDeplTimes();
      nInstances = nInstances + (n * deplTimes);
    }
    return nInstances;
  }

  ////private methods/////

  Rat computeCostPerScaling(WrapperScaleInterface wrapper) {
    List<DeploymentComponent> dcs = wrapper.getDeploymentComponent();
    Rat cost = 0;
    foreach(dc in dcs) {
      Rat singleCost = dc.getCostPerInterval();
      cost = cost + singleCost;
    }
    return cost;
  }

  Rat mcl(List<Int> microserviceInstances) {
    Rat mcl = 0;
    Int i = 0;
    while(i < length(microserviceInstances)) {
      Rat n_inst = nth(microserviceInstances,i);
      Rat handled_frequency = n_inst * nth(mcls,i) / nth(mfs,i);
      if(handled_frequency < mcl || mcl == 0){mcl = handled_frequency;}
      i = i + 1;
    }
    return mcl;
  }

  List<Int> vSum(List<Int> v1, List<Int> v2) {
    Int i = 0;
    List<Int> res = list[];
    while(i < length(v1)) {
      Int e1 = nth(v1,i);
      Int e2 = nth(v2,i);
      res = appendright(res, e1 + e2);
      i = i + 1;
    }
    return res;
  }

  List<Int> createEmpty(Int nDeltas) {
    Int n = nDeltas;
    List<Int> empty = list[];
    while(n > 0) {empty = appendright(empty, 0); n = n - 1;}
    return empty;
  }

  List<Int> incrementValue(Int index, List<Int> list) {
    List<Int> updatedList = list[];
    Int i = 0;
    while(i < length(list)) {
      if(i == index){updatedList = appendright(updatedList, nth(list, i) + 1);}
      else{updatedList = appendright(updatedList, nth(list, i));}
      i = i + 1;
    }
    return updatedList;
  }

  List<Int> addDeltas(Int scaleIndex, List<Int> currentPoliciesConfig) {
    List<Int> configDeltas = this.incrementValue(scaleIndex, currentPoliciesConfig);
    Int i = 0;
    while(i < scaleIndex) {
      configDeltas = this.incrementValue(i, configDeltas);
      i = i + 1;
    }
    return configDeltas;
  }

  String recordAction(List<Int> scalingTrace, List<Int> printableconfig) {
    String toPrint = "";
    Int i = 0;
    while(i < numScales) {
      Int diff = nth(printableconfig,i) - nth(scalingTrace,i);
      String name = nth(scaleNames, i);
      if (diff > 0) {toPrint = toPrint + " " + name + "-upx" + toString(diff);}
      else if (diff < 0) {toPrint = toPrint + " " + name + "-downx" + toString(-diff);}
      i = i + 1;
    }
    return toPrint;
  }

  Unit reconfigure(List<Int> deployedDeltas, List<Int> configDeltas) {
    Int i = 0;
    while(i < numScales) {
      Int diff = nth(configDeltas,i) - nth(deployedDeltas,i);
      Rat num = abs(diff);
      while(num > 0) {
         if (diff > 0) {nth(orchestrationDeltas,i)!deploy();}
         else {nth(orchestrationDeltas,i)!undeploy();}
         num = num - 1;
      }
      i = i + 1;
    }
  }

}


interface SetUpSystemInterface {
	MessageReceiver_LoadBalancerInterface initializeSystem();
}

class SetUpSystem() implements SetUpSystemInterface{

  Rat computeInitialCost(List<DeploymentComponent> dcs) {
    Rat cost = 0;
    foreach(dc in dcs) {
      Rat singleCost = dc.getCostPerInterval();
      cost = cost + singleCost;
    }
    return cost;
  }

	MessageReceiver_LoadBalancerInterface initializeSystem(){
		CloudProvider cp = new CloudProvider("CloudProvider");
    DBInterface dbObj = new DB();
    InvariantsDeployer c1 = new InvariantsDeployer(cp,dbObj);
		c1.deploy();
    List<DeploymentComponent> invariants_dcs = c1.getDeploymentComponent();
    Rat invariants_cost = this.computeInitialCost(invariants_dcs);

		//obtain the necessary object from the initial deployment to create scaling policy
    List<MessageReceiver_LoadBalancerInterface> messageReceiver_LoadBalancerList = c1.getMessageReceiver_LoadBalancerInterface();
		List<MessageParser_LoadBalancerInterface> messageParser_LoadBalancerList = c1.getMessageParser_LoadBalancerInterface();
		List<HeaderAnalyser_LoadBalancerInterface> headerAnalyser_LoadBalancerList = c1.getHeaderAnalyser_LoadBalancerInterface();
		List<LinkAnalyser_LoadBalancerInterface> linkAnalyser_LoadBalancerList = c1.getLinkAnalyser_LoadBalancerInterface();
		List<TextAnalyser_LoadBalancerInterface> textAnalyser_LoadBalancerList = c1.getTextAnalyser_LoadBalancerInterface();
		List<SentimentAnalyser_LoadBalancerInterface> sentimentAnalyser_LoadBalancerList = c1.getSentimentAnalyser_LoadBalancerInterface();
		List<VirusScanner_LoadBalancerInterface> virusScanner_LoadBalancerList = c1.getVirusScanner_LoadBalancerInterface();
		List<AttachmentsManager_LoadBalancerInterface> attachmentsManager_LoadBalancerList = c1.getAttachmentsManager_LoadBalancerInterface();
		List<ImageAnalyser_LoadBalancerInterface> imageAnalyser_LoadBalancerList = c1.getImageAnalyser_LoadBalancerInterface();
		List<NSFWDetector_LoadBalancerInterface> nsfwDetector_LoadBalancerList = c1.getNSFWDetector_LoadBalancerInterface();
		List<ImageRecognizer_LoadBalancerInterface> imageRecognizer_LoadBalancerList = c1.getImageRecognizer_LoadBalancerInterface();
		List<MessageAnalyser_LoadBalancerInterface> messageAnalyser_LoadBalancerList = c1.getMessageAnalyser_LoadBalancerInterface();
    BaseScale c2 = new BaseScale(cp, head(messageReceiver_LoadBalancerList), head(messageParser_LoadBalancerList), head(headerAnalyser_LoadBalancerList), head(linkAnalyser_LoadBalancerList), head(textAnalyser_LoadBalancerList), head(sentimentAnalyser_LoadBalancerList), head(virusScanner_LoadBalancerList), head(attachmentsManager_LoadBalancerList), head(imageAnalyser_LoadBalancerList), head(nsfwDetector_LoadBalancerList), head(imageRecognizer_LoadBalancerList), head(messageAnalyser_LoadBalancerList), dbObj);
    c2.deploy();
    List<DeploymentComponent> base_dcs = c2.getDeploymentComponent();
    Rat base_cost = this.computeInitialCost(base_dcs);

    //////END BASE CONFIGURATION DEPLOYMENT////////


    ///////SCALING ORCHESTRATION CREATION///////////

    List<Int> s1config = list[ 1, //MR
                               1, //MP
                             //0, //HA
                             //0, //LA
                             //0, //TA
                               1, //SA
                               1, //VS
                               0, //AM
                               0, //IA
                               1, //NSFW
                               1, //IR
                               1];//MA

    //create the scaling policy and insert them in the monitor
    Scale1 s1 = new Scale1(cp, head(messageReceiver_LoadBalancerList), head(messageParser_LoadBalancerList), head(headerAnalyser_LoadBalancerList), head(linkAnalyser_LoadBalancerList), head(textAnalyser_LoadBalancerList), head(sentimentAnalyser_LoadBalancerList), head(virusScanner_LoadBalancerList), head(attachmentsManager_LoadBalancerList), head(imageAnalyser_LoadBalancerList), head(nsfwDetector_LoadBalancerList), head(imageRecognizer_LoadBalancerList),head(messageAnalyser_LoadBalancerList),
      dbObj);
    WrapperScaleInterface wrapperS1 = new WrapperScale(s1, null, null, null, 7);

    List<Int> s2config = list[ 1, //MR
                               1, //MP
                               //0, //HA
                               //0, //LA
                               //0, //TA
                               4, //SA
                               3, //VS
                               1, //AM
                               1, //IA
                               3, //NSFW
                               3, //IR
                               3];//MA
		Scale2 s2 = new Scale2(cp, head(messageReceiver_LoadBalancerList), head(messageParser_LoadBalancerList), head(headerAnalyser_LoadBalancerList), head(linkAnalyser_LoadBalancerList), head(textAnalyser_LoadBalancerList), head(sentimentAnalyser_LoadBalancerList), head(virusScanner_LoadBalancerList), head(attachmentsManager_LoadBalancerList), head(imageAnalyser_LoadBalancerList), head(nsfwDetector_LoadBalancerList), head(imageRecognizer_LoadBalancerList), head(messageAnalyser_LoadBalancerList), dbObj);
    WrapperScaleInterface wrapperS2 = new WrapperScale(null, s2, null, null, 13);
    List<Int> s3config = list[ 2, //MR
                               2, //MP
                               //0, //HA
                               //0, //LA
                               //0, //TA
                               6, //SA
                               4, //VS
                               1, //AM
                               1, //IA
                               4, //NSFW
                               4, //IR
                               4];//MA

    Scale3 s3 = new Scale3(cp, head(messageReceiver_LoadBalancerList), head(messageParser_LoadBalancerList), head(headerAnalyser_LoadBalancerList), head(linkAnalyser_LoadBalancerList), head(textAnalyser_LoadBalancerList), head(sentimentAnalyser_LoadBalancerList), head(virusScanner_LoadBalancerList), head(attachmentsManager_LoadBalancerList), head(imageAnalyser_LoadBalancerList), head(nsfwDetector_LoadBalancerList), head(imageRecognizer_LoadBalancerList), head(messageAnalyser_LoadBalancerList), dbObj);
    WrapperScaleInterface wrapperS3 = new WrapperScale(null, null, s3, null, 8);

    List<Int> s4config = list[ 3, //MR
                               3, //MP
                               //0, //HA
                               //0, //LA
                               //0, //TA
                               8, //SA
                               6, //VS
                               2, //AM
                               2, //IA
                               6, //NSFW
                               6, //IR
                               6];//MA
    Scale4 s4 = new Scale4(cp, head(messageReceiver_LoadBalancerList), head(messageParser_LoadBalancerList), head(headerAnalyser_LoadBalancerList), head(linkAnalyser_LoadBalancerList), head(textAnalyser_LoadBalancerList), head(sentimentAnalyser_LoadBalancerList), head(virusScanner_LoadBalancerList), head(attachmentsManager_LoadBalancerList), head(imageAnalyser_LoadBalancerList), head(nsfwDetector_LoadBalancerList), head(imageRecognizer_LoadBalancerList), head(messageAnalyser_LoadBalancerList), dbObj);
    WrapperScaleInterface wrapperS4 = new WrapperScale(null, null, null, s4, 14);

    //////END SCALING ORCHESTRATION CREATION///////

    Int kbig = 20;
    Int k = 10;
    Rat initial_inbound_workload = 32;
    Int windowDim = 300;
    Int ratio = 10; //ratio between monitoring window and generation window
    ScalerServiceInterface scaler = new ScalerService(kbig, base_cost + invariants_cost, 13);
    scaler.insertScalingElements(s1config, wrapperS1, "Scale1");
    scaler.insertScalingElements(s2config, wrapperS2, "Scale2");
    scaler.insertScalingElements(s3config, wrapperS3, "Scale3");
    scaler.insertScalingElements(s4config, wrapperS4, "Scale4");
    List<Int> config = scaler.computeConfiguration(initial_inbound_workload);
    scaler.scale(config);
    String scalingAct = scaler.getScalingActions();
    println("Initial Configuration: Basex1 " + scalingAct);
    await duration(200,200);
    //create the monitor
	  MonitorInterface monitor = new Monitor(scaler, dbObj, windowDim, kbig, k, ratio, config);
		return head(messageReceiver_LoadBalancerList);
	}
}



interface MailGeneratorInterface{}

class MailGenerator(MessageReceiver_LoadBalancerInterface entryPoint) implements MailGeneratorInterface {
  Rat windowDim = 30;
	Unit run() {
    //new workload
    /*List<Int> realWorkload = list[82, 84, 85, 90, 93, 96, 100, 104, 108, 114,
                                  118, 122, 128, 133, 138, 142, 147, 150, 150, 151,
                                  151, 152, 152, 153, 153, 153, 153, 153, 154, 154,
                                  154, 154, 154, 155, 155, 155, 155, 155, 155, 155,
                                  155, 155, 155, 155, 155, 155, 155, 156, 156, 156,
                                  156, 157, 157, 157, 157, 163, 173, 180, 196, 210,
                                  220, 234, 242, 246, 254, 261, 271, 280, 295, 287,
                                  279, 268, 258, 250, 242, 234, 225, 220, 215, 205,
                                  200, 196, 190, 187, 184, 187, 190, 193, 197, 200,
                                  203, 206, 209, 212, 216, 220, 224, 219, 214, 210,
                                  204, 192, 188, 184, 180, 175, 170, 165, 160, 157,
                                  154, 150, 152, 154, 156, 158, 162, 168, 174, 182,
                                  191, 200, 209, 219, 228, 237, 247, 256, 266, 275,
                                  284, 294, 303, 313, 322, 331, 341, 355, 369, 374,
                                  386, 398, 416, 427, 445, 455, 496, 515, 496, 480,
                                  470, 455, 440, 420, 399, 388, 378, 368, 358, 348,
                                  337, 327, 317, 307, 297, 286, 276, 266, 256, 246,
                                  235, 225, 215, 205, 195, 185, 175, 164, 155, 145,
                                  134, 124, 114, 104, 97, 96, 93, 88, 85, 84];*/

    //primo workload
    /*List<Int> realWorkload = list[47,47,47,47,54,54,54,46,46,46,
                                  50,50,50,50,65,65,84,84,68,90,
                                  112,137,137,143,167,188,188,210,231,231,
                                  251,251,274,294,311,311,311,332,355,375,
                                  375,393,393,416,422,422,422,427,427,431,
                                  431,431,431,418,418,418,413,413,399,396,
                                  414,390,390,392,412,412,412,412,390,393,
                                  393,414,440,425,404,384,403,403,403,388,
                                  408,427,427,405,420,420,440,430,416,416,
                                  405,405,413,413,413,413,427,427,447,447,
                                  438,438,438,418,407,433,449,420,405,405,
                                  405,412,412,412,393,393,345,323,317,305,
                                  294,272,250,272,250,227,208,192,182,169,
                                  154,145,133,125,112,112,94,92,88,85,
                                  83,80,75,72,61,59,55,52,52,52,
                                  52,43,43,43,40,40,40,40,44,42,
                                  47,47,47,47,54,54,54,46,46,46];*/
    //enron
    List<Int> realWorkload = list[10, 5, 2, 2, 25, 22, 17, 20, 22, 27,
                                  7, 17, 12, 50, 52, 30, 22, 17, 90, 120,
                                  40, 37, 35, 80, 75, 15, 165, 535, 497, 507,
                                  522, 507, 510, 557, 610, 617, 610, 675, 665, 640,
                                  635, 612, 602, 597, 575, 585, 560, 555, 597, 590,
                                  590, 590, 582, 542, 535, 557, 565, 587, 672, 710,
                                  715, 750, 760, 750, 755, 747, 725, 747, 737, 730,
                                  722, 732, 725, 727, 720, 725, 722, 745, 740, 735,
                                  682, 690, 650, 635, 625, 590, 550, 510, 515, 532,
                                  552, 545, 520, 507, 505, 502, 515, 510, 512, 510,
                                  500, 505, 505, 432, 425, 425, 422, 395, 392, 395,
                                  405, 392, 397, 377, 367, 327, 322, 312, 310, 340,
                                  320, 315, 320, 312, 305, 300, 297, 275, 280, 287,
                                  290, 287, 297, 310, 307, 305, 302, 312, 300, 297,
                                  297, 305, 312, 310, 322, 315, 312, 312, 275, 267,
                                  260, 260, 257, 250, 245, 230, 210, 227, 250, 247,
                                  232, 230, 217, 210, 200, 192, 187, 167, 152, 167,
                                  150, 137, 127, 65, 62, 55, 52, 50, 50, 50,
                                  45, 132, 130, 47, 92, 95, 150, 157, 255, 400,
                                  430, 440, 440, 445, 455, 475, 457, 447, 447, 420];
		Int i = 0;
    Int round = 0;
    while(round < 200) {
      Rat currentMessageNumber = nth(realWorkload, i);
      i = (i + 1) % length(realWorkload);
      round = round + 1;
      Int j = 0;
      while(j < currentMessageNumber) {
        entryPoint!newMessage("Message");
        await duration(windowDim / currentMessageNumber, windowDim / currentMessageNumber);
        j = j + 1;
      }
    }
	}
}

{
  SetUpSystemInterface setupSystem = new SetUpSystem();
	MessageReceiver_LoadBalancerInterface entryPoint = setupSystem.initializeSystem();
  MailGeneratorInterface testProcess = new MailGenerator(entryPoint);
}
