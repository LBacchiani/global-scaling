module ImageRecognizerPlan;
export *;
import * from ABS.DC;
import * from EmailProcessingPipelineArchitecture;

interface ImageRecognizerPlan{
	List<ImageRecognizerInterface> getImageRecognizerInterface();
	List<DeploymentComponent> getDeploymentComponent();
	Unit deploy();
	Unit undeploy();
}

class ImageRecognizerPlan(CloudProvider cloudProvider, ImageRecognizer_LoadBalancerInterface imageRecognizer_LoadBalancerObj) implements ImageRecognizerPlan{

	List<List<ImageRecognizerInterface>> ls_ls_ImageRecognizerInterface = Nil;
	List<ImageRecognizerInterface> ls_ImageRecognizerInterface = Nil;
	List<List<DeploymentComponent>> ls_ls_DeploymentComponent = Nil;
	List<DeploymentComponent> ls_DeploymentComponent = Nil;
	Rat waiting_time = 100;
	{
		cloudProvider.addInstanceDescription(Pair("c4_xlarge",
			map[Pair(CostPerInterval,237)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,750)
			,Pair(Memory,750)
			,Pair(Cores,4)
			,Pair(Speed,20)
			]));
		cloudProvider.addInstanceDescription(Pair("c4_large",
			map[Pair(CostPerInterval,119)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,500)
			,Pair(Memory,375)
			,Pair(Cores,2)
			,Pair(Speed,10)
			]));
		cloudProvider.addInstanceDescription(Pair("c4_2xlarge",
			map[Pair(CostPerInterval,476)
			,Pair(PaymentInterval,1)
			,Pair(Bandwidth,1000)
			,Pair(Memory,1500)
			,Pair(Cores,8)
			,Pair(Speed,40)
			]));
	}

	List<ImageRecognizerInterface> getImageRecognizerInterface() { return ls_ImageRecognizerInterface; }
	List<DeploymentComponent> getDeploymentComponent() { return ls_DeploymentComponent; }

	Unit deploy() {
		ls_ls_ImageRecognizerInterface = Cons(ls_ImageRecognizerInterface,ls_ls_ImageRecognizerInterface);
		ls_ImageRecognizerInterface = Nil;
		ls_ls_DeploymentComponent = Cons(ls_DeploymentComponent,ls_ls_DeploymentComponent);
		ls_DeploymentComponent = Nil;
		this.deploy_aux();
	}

	Unit undeploy() {
		if (ls_ls_DeploymentComponent != Nil) {
			this.undeploy_aux();
			ls_DeploymentComponent = head(ls_ls_DeploymentComponent);
			ls_ls_DeploymentComponent = tail(ls_ls_DeploymentComponent);
				ls_ImageRecognizerInterface = head(ls_ls_ImageRecognizerInterface);
			ls_ls_ImageRecognizerInterface = tail(ls_ls_ImageRecognizerInterface);
		}
	}


	Unit deploy_aux() {
		Map<DeploymentComponent,Rat> speedPatchMap = map[];
		DeploymentComponent c4_2xlarge_0 = cloudProvider.launchInstanceNamed("c4_2xlarge");
		ls_DeploymentComponent = Cons(c4_2xlarge_0,ls_DeploymentComponent);
		speedPatchMap = put(speedPatchMap,c4_2xlarge_0,0);
		[DC: c4_2xlarge_0] ImageRecognizerInterface odefault___ImageRecognizer_0_c4_2xlarge_0 = new ImageRecognizer();
		Rat coreRequired_odefault___ImageRecognizer_0_c4_2xlarge_0 = 6;
		speedPatchMap = put(speedPatchMap, c4_2xlarge_0, fromJust(lookup(speedPatchMap,c4_2xlarge_0)) + coreRequired_odefault___ImageRecognizer_0_c4_2xlarge_0);
		ls_ImageRecognizerInterface = Cons(odefault___ImageRecognizer_0_c4_2xlarge_0, ls_ImageRecognizerInterface);
		this!patchSpeed(speedPatchMap);
		await duration(waiting_time,waiting_time);
		imageRecognizer_LoadBalancerObj.connectInstance(odefault___ImageRecognizer_0_c4_2xlarge_0);
	}

	Unit undeploy_aux() {
		ImageRecognizerInterface odefault___ImageRecognizer_0_c4_2xlarge_0 = nth(ls_ImageRecognizerInterface,0);
		imageRecognizer_LoadBalancerObj.disconnectInstance();
		while ( !isEmpty(ls_DeploymentComponent) ) {
			cloudProvider.shutdownInstance(head(ls_DeploymentComponent));
			ls_DeploymentComponent = tail(ls_DeploymentComponent);
		}
	}

	Unit patchSpeed(Map<DeploymentComponent,Rat> dcs) {
		foreach(entry in entries(dcs)) {
			DeploymentComponent dc = fst(entry);
			Rat coreUsed = snd(entry);
			InfRat speed_aux = await dc!total(Speed);
			Rat total_speed = case speed_aux {
				Fin(x) => x;
				_ => -1;
			};
			if(total_speed != -1) {
				Rat totalCore = await dc!getNumberOfCores();
				Rat speedPerCore = total_speed / totalCore;
				dc!decrementResources(total_speed - (speedPerCore * coreUsed), Speed);
			}
		}
	}
}
