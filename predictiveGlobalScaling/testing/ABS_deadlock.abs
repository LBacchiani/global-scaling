module Test;

export *;
import * from ABS.DC;


interface MailGeneratorInterface{}

class MailGenerator(Service entryPoint) implements MailGeneratorInterface {
	Unit run() {
    while(True) {
      Int j = 0;
      while(j < 400) {
        entryPoint!newMessage("Message");
        await duration(30 / 400, 30 / 400);
        j = j + 1;
      }
    }
	}
}

interface Monitor{}

class MonitorImpl(Service end) implements Monitor {
	Unit run() {
    while(True) {
			await duration(300,300);
			Int counter = await end!getCounter();
			println("Counter: " + toString(counter));
    }
	}
}

interface Service {
	Unit newMessage(String mailData);
	Int getCounter();
}

class ServiceImpl(Service s) implements Service {
	Int i = 0;
	Unit newMessage(String mailData) {
		[Cost: 30] skip;
		if(s != null) s!newMessage("Message");
		else i = i + 1;
	}
	Int getCounter() {
		return i;
	}

}


{
	CloudProvider cloudProvider = new CloudProvider("CloudProvider");
	cloudProvider.addInstanceDescription(Pair("c4_large",map[Pair(Memory,375),Pair(Cores,2),Pair(Speed,10)]));
	DeploymentComponent c1 = cloudProvider.launchInstanceNamed("c4_large");
	DeploymentComponent c2 = cloudProvider.launchInstanceNamed("c4_large");
	DeploymentComponent c3 = cloudProvider.launchInstanceNamed("c4_large");
	[DC: c1] Service s = new ServiceImpl(null);
	[DC: c1] Service s1 = new ServiceImpl(s);
	[DC: c2] Service s2 = new ServiceImpl(s1);
	[DC: c2] Service s3 = new ServiceImpl(s2);
	[DC: c3] Service s4 = new ServiceImpl(s3);
	[DC: c3] Service s5 = new ServiceImpl(s4);
	MailGeneratorInterface gen = new MailGenerator(s5);
	Monitor mon = new MonitorImpl(s);
}
