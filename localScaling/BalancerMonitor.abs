module BalancerMonitor;

export *;
import * from EmailProcessingPipelineArchitecture;

interface LoadBalancerMonitorInterface{
  Unit check();
}

class LoadBalancerMonitor(LoadBalancer balancer, String balancerName, Rat mcl, Int baseInstanceN, Rat mf) implements LoadBalancerMonitorInterface {
  Int deplInstances = baseInstanceN;
  ScalingWrapper sw;
  Rat k = 10 * mf;
  Rat kbig =  20 * mf;
  {sw = new ScalingWrapperImpl(balancer);}

  Unit check() {
    Rat inbound_workload = balancer.returninbound_workload();
    inbound_workload = inbound_workload / 10;
    if(inbound_workload - (mcl * deplInstances - kbig)  > k || (mcl * deplInstances - kbig) - inbound_workload > k) {
      Int configInstances = ceil(float((inbound_workload + kbig)/ mcl));
      if(configInstances > deplInstances) {sw!deploy(configInstances - deplInstances);}
      else if(configInstances < deplInstances && deplInstances >= baseInstanceN) {sw!undeploy(deplInstances - configInstances);}
      deplInstances = configInstances;
    }
    balancer.resetMetrics();
  }
}

interface ScalingWrapper {
  Unit deploy(Int n);
  Unit undeploy(Int n);
}

class ScalingWrapperImpl(LoadBalancer balancer) implements ScalingWrapper{
  Unit deploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!deploy();
      times = times - 1;
    }
  }

  Unit undeploy(Int n) {
    Int times = n;
    while(times != 0) {
      balancer!undeploy();
      times = times - 1;
    }
  }
}
