module Architecture;

export *;
import * from ABS.DC;
import * from ABS.SmartDeploy;
import * from DB;
import * from MessageReceiverPlan;
import * from MessageParserPlan;
import * from SentimentAnalyserPlan;
import * from VirusScannerPlan;
import * from AttachmentsManagerPlan;
import * from ImageAnalyserPlan;
import * from NSFWDetectorPlan;
import * from ImageRecognizerPlan;
import * from MessageAnalyserPlan;



//////////////////////////////////CLOUD PROVIDER/////////////////////////
[SmartDeployCloudProvider: "{ \"c4_large\" : { \"cost\" : 119, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 2, \"Memory\" : 375, \"Bandwidth\" : 500, \"Speed\" : 10, \"Startupduration\" : 100}} , \"c4_xlarge\" : { \"cost\" : 237, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 4, \"Memory\" : 750, \"Bandwidth\" : 750, \"Speed\" : 20, \"Startupduration\" : 100}} , \"c4_2xlarge\" : { \"cost\" : 476, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 8, \"Memory\" : 1500, \"Bandwidth\" : 1000, \"Speed\" : 40, \"Startupduration\" : 100}}, \"c4_4xlarge\" : { \"cost\" : 950, \"payment_interval\" : 1, \"resources\" : { \"Cores\" : 16, \"Memory\" : 3000, \"Bandwidth\" : 2000, \"Speed\" : 80, \"Startupduration\" : 100}}}"]
///////////////////////////////////////////////////////////////////////

/////////////////////INVARIANTS ANNOTATION/////////////////////////////////////
/*
[ SmartDeploy : "{ \"id\":\"InvariantsDeployer\", \"specification\":\"MessageReceiver_LoadBalancer = 1 and MessageParser_LoadBalancer = 1 and HeaderAnalyser_LoadBalancer = 1 and LinkAnalyser_LoadBalancer = 1 and TextAnalyser_LoadBalancer = 1 and SentimentAnalyser_LoadBalancer = 1 and VirusScanner_LoadBalancer = 1 and AttachmentsManager_LoadBalancer = 1 and ImageAnalyser_LoadBalancer = 1 and NSFWDetector_LoadBalancer = 1 and ImageRecognizer_LoadBalancer = 1 and MessageAnalyser_LoadBalancer = 1 and forall ?x in DC: ( ?x.MessageAnalyser_LoadBalancer + ?x.MessageParser_LoadBalancer + ?x.HeaderAnalyser_LoadBalancer + ?x.LinkAnalyser_LoadBalancer + ?x.TextAnalyser_LoadBalancer + ?x.SentimentAnalyser_LoadBalancer + ?x.VirusScanner_LoadBalancer + ?x.AttachmentsManager_LoadBalancer + ?x.ImageAnalyser_LoadBalancer + ?x.NSFWDetector_LoadBalancer + ?x.ImageRecognizer_LoadBalancer + ?x.MessageAnalyser_LoadBalancer  > 0 impl (sum ?y in obj: ?x.?y) = 1)\", \"DC\":[ ], \"obj\":[{\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []} ], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[ \"local\"], \"add_method_priorities\":[], \"remove_method_priorities\":[] }" ]
*/

///////BASESCALE///////
/*
[SmartDeploy : "{\"id\":\"BaseScale\",\"specification\":\"MessageReceiver = 1 and MessageParser = 1 and HeaderAnalyser = 1 and LinkAnalyser = 1 and TextAnalyser = 1 and SentimentAnalyser = 2 and VirusScanner = 1 and AttachmentsManager = 1 and ImageAnalyser = 1 and NSFWDetector = 2 and ImageRecognizer = 2 and MessageAnalyser = 2 and forall ?x in DC: (?x.HeaderAnalyser + ?x.LinkAnalyser + ?x.TextAnalyser > 0 impl (sum ?y in obj: ?x.?y) = 1)\",\"DC\":[], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]}, {\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]}, {\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]},  {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]}, {\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}, {\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]}, {\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40, \"c4_4xlarge\":40 }, \"bind preferences\":[\"((forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type MessageParser in '.*' :  forall ?y of type messageParser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y) and (forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y) and  (forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y))\"]}"]
*/

//////////////////////////////////////////////////////////////////////////////////////////

///MESSAGE RECEIVER PLAN///
/*
[ SmartDeploy : "{ \"id\":\"MessageReceiverPlan\", \"specification\":\"MessageReceiver = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"messageReceiver_LoadBalancerObj\",\"interface\":\"MessageReceiver_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageReceiver_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageReceiverInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageReceiverInterface\"}}]},{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type MessageReceiver in '.*' :  forall ?y of type messageReceiver_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/
///MESSAGE PARSER PLAN///
/*
[ SmartDeploy : "{ \"id\":\"MessageParserPlan\", \"specification\":\"MessageParser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"messageParser_LoadBalancerObj\",\"interface\":\"MessageParser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageParser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageParserInterface\"},\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageParserInterface\"}}]}, {\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []},{\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type MessageParser in '.*' : forall ?y of type messageParser_LoadBalancerObj in '.*': ?x used by ?y)\"]}"]
*/

/*
///HEADER ANALYSER PLAN///
[ SmartDeploy : "{ \"id\":\"HeaderAnalyserPlan\", \"specification\":\"HeaderAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"sp_obj\",\"interface\":\"SpeedPatcher\",\"provides\":[{\"ports\":[\"SpeedPatcher\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"addMicroservice\", \"param_type\": \"Microservice\"}, \"remove\" : { \"name\": \"disconnectInstance\"}}]},{\"name\":\"headerAnalyser_LoadBalancerObj\",\"interface\":\"HeaderAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"HeaderAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"HeaderAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"HeaderAnalyserInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type headerAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\",\"(forall ?x of type HeaderAnalyser in '.*' :  forall ?y of type sp_obj in '.*' : ?x used by ?y)\"]}"]
*/

//LINK ANALYSER PLAN////
/*
[ SmartDeploy : "{ \"id\":\"LinkAnalyserPlan\", \"specification\":\"LinkAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"sp_obj\",\"interface\":\"SpeedPatcher\",\"provides\":[{\"ports\":[\"SpeedPatcher\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"addMicroservice\", \"param_type\": \"Microservice\"}, \"remove\" : { \"name\": \"disconnectInstance\"}}]},{\"name\":\"linkAnalyser_LoadBalancerObj\",\"interface\":\"LinkAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"LinkAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"LinkAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"LinkAnalyserInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type LinkAnalyser in '.*' :  forall ?y of type linkAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\",\"(forall ?x of type LinkAnalyser in '.*' :  forall ?y of type sp_obj in '.*' : ?x used by ?y)\"]}"]
*/

///Text ANALYSER PLAN///
/*
[ SmartDeploy : "{ \"id\":\"TextAnalyserPlan\", \"specification\":\"TextAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"sp_obj\",\"interface\":\"SpeedPatcher\",\"provides\":[{\"ports\":[\"SpeedPatcher\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"addMicroservice\", \"param_type\": \"Microservice\"}, \"remove\" : { \"name\": \"disconnectInstance\"}}]},{\"name\":\"textAnalyser_LoadBalancerObj\",\"interface\":\"TextAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"TextAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"TextAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"TextAnalyserInterface\"}}]},{\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []},{\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type TextAnalyser in '.*' :  forall ?y of type textAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\",\"(forall ?x  of type TextAnalyser in '.*' :  forall ?y of type sp_obj in '.*' : ?x used by ?y)\"]}"]
*/

///Sentiment Analyser PLAN////
/*
[ SmartDeploy : "{ \"id\":\"SentimentAnalyserPlan\", \"specification\":\"SentimentAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"sentimentAnalyser_LoadBalancerObj\",\"interface\":\"SentimentAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"SentimentAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"SentimentAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"SentimentAnalyserInterface\"}}]}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type SentimentAnalyser in '.*' :  forall ?y of type sentimentAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/
///Virus Scanner PLAN////
/*
[ SmartDeploy : "{ \"id\":\"VirusScannerPlan\", \"specification\":\"VirusScanner = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"virusScanner_LoadBalancerObj\",\"interface\":\"VirusScanner_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"VirusScanner_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"VirusScannerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"VirusScannerInterface\"}}]}, {\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []},{\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type VirusScanner in '.*' :  forall ?y of type virusScanner_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/

///Attachments Manager PLAN////
/*
[ SmartDeploy : "{ \"id\":\"AttachmentsManagerPlan\", \"specification\":\"AttachmentsManager = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"attachmentsManager_LoadBalancerObj\",\"interface\":\"AttachmentsManager_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"AttachmentsManager_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"AttachmentsManagerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"AttachmentsManagerInterface\"}}]}, {\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type AttachmentsManager in '.*' :  forall ?y of type attachmentsManager_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/
//IMAGE ANALYSER PLAN//
/*
[ SmartDeploy : "{ \"id\":\"ImageAnalyserPlan\", \"specification\":\"ImageAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"imageAnalyser_LoadBalancerObj\",\"interface\":\"ImageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageAnalyserInterface\"}}]},{\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []},{\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []},{\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type ImageAnalyser in '.*' :  forall ?y of type imageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/

//NSFW DETECTOR PLAN//
/*
[ SmartDeploy : "{ \"id\":\"NSFWDetectorPlan\", \"specification\":\"NSFWDetector = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"nsfwDetector_LoadBalancerObj\",\"interface\":\"NSFWDetector_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"NSFWDetector_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"NSFWDetectorInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"NSFWDetectorInterface\"}}]}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type NSFWDetector in '.*' :  forall ?y of type nsfwDetector_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/

//Image Recognizer PLAN//
/*
[ SmartDeploy : "{ \"id\":\"ImageRecognizerPlan\", \"specification\":\"ImageRecognizer = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"imageRecognizer_LoadBalancerObj\",\"interface\":\"ImageRecognizer_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"ImageRecognizer_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"ImageRecognizerInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"ImageRecognizerInterface\"}}]}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type ImageRecognizer in '.*' :  forall ?y of type imageRecognizer_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/

//MESSAGE ANALYSER PLAN//
/*
[ SmartDeploy : "{ \"id\":\"MessageAnalyserPlan\", \"specification\":\"MessageAnalyser = 1\", \"DC\":[ ], \"obj\":[{\"name\":\"messageAnalyser_LoadBalancerObj\",\"interface\":\"MessageAnalyser_LoadBalancerInterface\",\"provides\":[{\"ports\":[\"MessageAnalyser_LoadBalancerInterface\"],\"num\":-1}],\"methods\" : [{\"add\" : { \"name\": \"connectInstance\", \"param_type\": \"MessageAnalyserInterface\" },\"remove\" : { \"name\": \"disconnectInstance\", \"return_type\" : \"MessageAnalyserInterface\"}}]},{\"name\":\"dbObj\",\"interface\":\"DBInterface\",\"provides\":[{\"ports\":[\"DBInterface\"],\"num\":-1}],\"methods\" : []}], \"cloud_provider_DC_availability\":{ \"c4_large\":40, \"c4_xlarge\":40, \"c4_2xlarge\":40 }, \"bind preferences\":[\"(forall ?x of type MessageAnalyser in '.*' :  forall ?y of type messageAnalyser_LoadBalancerObj in '.*' : ?x used by ?y)\"]}"]
*/

interface LoadBalancer {
  Unit resetMetrics();
  Unit deploy();
  Unit undeploy();
  Int returninbound_workload();
  String getInstanceNumberDescription();
  Rat getCost();
  Int getInstancesNumber();
  Unit tick();
  Int get_one_sec_workload();
}


interface MessageReceiver_LoadBalancerInterface extends LoadBalancer {
    Unit connectInstance(MessageReceiverInterface newInstance);
    MessageReceiverInterface disconnectInstance();
    Unit newMessage();
    Unit connectPlan(MessageReceiverPlan p);
    Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"MessageReceiver_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageParserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageParserInterface\"}}]}]}"]
class MessageReceiver_LoadBalancer(DBInterface db) implements MessageReceiver_LoadBalancerInterface {
  List<MessageReceiverInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;
  Int inbound_workload = 0;
  Int pending = 0;
  MessageReceiverPlan plan;
  Int deplTimes = 0;
  Rat cost = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(MessageReceiverInterface newInstance){
    if(plan != null){deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  MessageReceiverInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    MessageReceiverInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(MessageReceiverPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "MR" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit newMessage(){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    db.messageArrived();
    if(pending < buffer_size) {
      pending = pending + 1;
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageReceiverInterface selectedInstance = nth(instancesConnected, nextInstance);
      selectedInstance!newMessage(this);
    } else {db.messageLoss("");}
  }

  Unit removeMessage() {pending = pending - 1;}

}

interface MessageReceiverInterface {
    Unit newMessage(MessageReceiver_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"MessageReceiver\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageParser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class MessageReceiver(MessageParser_LoadBalancerInterface parserLoadBalancer) implements MessageReceiverInterface {
  Int speed_res = 5;
  Int mcl = 116;
  Unit newMessage (MessageReceiver_LoadBalancerInterface balancer) {
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    parserLoadBalancer.newRequest();
  }
}

interface MessageParser_LoadBalancerInterface extends LoadBalancer {
    Unit connectInstance(MessageParserInterface newInstance);
    MessageParserInterface disconnectInstance();
    Unit newRequest();
    Unit removeMessage();
    Unit connectPlan(MessageParserPlan p);
}

//[SmartDeployCost : "{\"class\" : \"MessageParser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageParserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageParserInterface\"}}]}]}"]
class MessageParser_LoadBalancer(DBInterface db) implements MessageParser_LoadBalancerInterface {
  List<MessageParserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 1;
  Int pending = 0;
  Int inbound_workload = 0;
  Int id = 0;
  MessageParserPlan plan;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
  if(max <= one_sec_reqs) max = one_sec_reqs;
  one_sec_reqs = 0;
}

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(MessageParserInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  MessageParserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    MessageParserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = await plan!getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(MessageParserPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "MP" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit newRequest (){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageParserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!parseMessage(this, id);
      id = id + 1;
    } else {db.messageLoss("");}
  }

  Unit removeMessage() {pending = pending - 1;}

}

interface MessageParserInterface   {
  Unit parseMessage(MessageParser_LoadBalancerInterface balancer, Int id);
}


////[SmartDeployCost : "{\"class\" : \"MessageParser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"HeaderAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"LinkAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"TextAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"VirusScanner_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}, {\"kind\" : \"require\",\"type\" : \"DBInterface\"}],\"methods\" : []}]}"]
class MessageParser(HeaderAnalyser_LoadBalancerInterface headerAnalyserLoadBalancer, LinkAnalyser_LoadBalancerInterface linkAnalyserLoadBalancer, TextAnalyser_LoadBalancerInterface textAnalyserLoadBalancer, VirusScanner_LoadBalancerInterface virusScannerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer, DBInterface db) implements MessageParserInterface {
  Int speed_res = 5;
  Int mcl = 110;
  Unit parseMessage(MessageParser_LoadBalancerInterface balancer, Int id){
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Int n_links = random(11);
    Int n_attachments = random(5);
    String messageId = toString(id);
    db.insertMessageInformation(messageId, n_attachments);
    headerAnalyserLoadBalancer.newRequest(messageId);
    if(n_links > 0){linkAnalyserLoadBalancer.newRequest(messageId);}
    else{messageAnalyserLoadBalancer.insertResult(messageId);}
    textAnalyserLoadBalancer.newRequest(messageId);
    while(n_attachments > 0){
      virusScannerLoadBalancer.newRequest(messageId);
      n_attachments = n_attachments - 1;
    }
  }
}

interface HeaderAnalyser_LoadBalancerInterface {
    Unit connectInstance(HeaderAnalyserInterface newInstance);
    HeaderAnalyserInterface disconnectInstance();
    Unit newRequest (String messageId);
  }

//[SmartDeployCost : "{\"class\" : \"HeaderAnalyser_LoadBalancer\", \"scenarios\" : [{ \"name\" : \"default\", \"provide\" : -1, \"cost\" : { \"Cores\" : 2, \"Memory\" : 200 }, \"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{ \"add\" : { \"name\" : \"connectInstance\", \"param_type\" : \"HeaderAnalyserInterface\" }, \"remove\" : { \"name\" : \"disconnectInstance\", \"return_type\": \"HeaderAnalyserInterface\" }}]}]}"]
class HeaderAnalyser_LoadBalancer(DBInterface db)  implements HeaderAnalyser_LoadBalancerInterface {
  List<HeaderAnalyserInterface> instancesConnected = list[];
  Rat buffer_size = 50 * 1;
  Int nextInstance = 0;
  Int deplTimes = 0;

  Unit connectInstance(HeaderAnalyserInterface newInstance){
    deplTimes = deplTimes + 1;
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  HeaderAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    HeaderAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String messageId){
    HeaderAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
    selectedInstance.analyzeHeaders(messageId);
  }
}

interface HeaderAnalyserInterface {
  Unit analyzeHeaders (String messageId);
}

////[SmartDeployCost : "{\"class\" : \"HeaderAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class HeaderAnalyser(MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements HeaderAnalyserInterface {
  Unit analyzeHeaders (String messageId) {messageAnalyserLoadBalancer.insertResult(messageId);}
}

interface LinkAnalyser_LoadBalancerInterface {
  Unit connectInstance(LinkAnalyserInterface newInstance);
  LinkAnalyserInterface disconnectInstance();
  Unit newRequest (String messageId);
}

//[SmartDeployCost : "{\"class\" : \"LinkAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"LinkAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"LinkAnalyserInterface\"}}]}]}"]
class LinkAnalyser_LoadBalancer(DBInterface db)  implements LinkAnalyser_LoadBalancerInterface {
  List<LinkAnalyserInterface> instancesConnected = list[];
  Int nextInstance = 0;
  Rat buffer_size = 50 * 1;
  Int deplTimes = 0;

  Unit connectInstance(LinkAnalyserInterface newInstance){
    deplTimes = deplTimes + 1;
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  LinkAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    LinkAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String messageId){
    LinkAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
    selectedInstance.analyzeLink(messageId);
  }
}

interface LinkAnalyserInterface   {
  Unit analyzeLink (String messageId);
}

////[SmartDeployCost : "{\"class\" : \"LinkAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class LinkAnalyser(MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements LinkAnalyserInterface {
  Unit analyzeLink (String messageId) {
    messageAnalyserLoadBalancer.insertResult(messageId);
  }
}

interface TextAnalyser_LoadBalancerInterface {
  Unit connectInstance(TextAnalyserInterface newInstance);
  TextAnalyserInterface disconnectInstance();
  Unit newRequest(String messageId);
}

//[SmartDeployCost : "{\"class\" : \"TextAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"TextAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"TextAnalyserInterface\"}}]}]}"]
class TextAnalyser_LoadBalancer(DBInterface db)  implements TextAnalyser_LoadBalancerInterface {
  List<TextAnalyserInterface> instancesConnected = list[];
  Int nextInstance = 0;
  Int deplTimes = 0;

  Unit connectInstance(TextAnalyserInterface newInstance){
    deplTimes = deplTimes + 1;
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  TextAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    TextAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit newRequest (String messageId){
    TextAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
    selectedInstance!analyzeText(messageId);
  }
}

interface TextAnalyserInterface {
  Unit analyzeText(String messageId);
}

////[SmartDeployCost : "{\"class\" : \"TextAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"SentimentAnalyser_LoadBalancerInterface\" },{\"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\"}],\"methods\" : []}]}"]
class TextAnalyser(SentimentAnalyser_LoadBalancerInterface sentimentAnalayserLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements TextAnalyserInterface {

  Unit analyzeText(String messageId) {
    Int n_text_blocks = random(4) + 1;
    Bool refused = False;
    List<Maybe<Fut<String>>> futList = list[];
    while (length(futList) < n_text_blocks) {
      Maybe<Fut<String>> currentFuture = sentimentAnalayserLoadBalancer.newRequest(messageId);
      futList = appendright(futList, currentFuture);
    }
    while (futList != Nil) {
      Maybe<Fut<String>> maybe = head(futList);
      futList = tail(futList);
      if(!isJust(maybe)) {
        futList = Nil;
        refused = True;
      }
      else {
        Fut<String> currentFuture = fromJust(maybe);
        await currentFuture?;
      }
		}
    if(!refused){messageAnalyserLoadBalancer.insertResult(messageId);}
  }
}


interface SentimentAnalyser_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(SentimentAnalyserInterface newInstance);
  SentimentAnalyserInterface disconnectInstance();
  Maybe<Fut<String>> newRequest (String messageId);
  Unit connectPlan(SentimentAnalyserPlan p);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"SentimentAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"SentimentAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"SentimentAnalyserInterface\"}}]}]}"]
class SentimentAnalyser_LoadBalancer(DBInterface dbObj)  implements SentimentAnalyser_LoadBalancerInterface {
  List<SentimentAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  SentimentAnalyserPlan plan;
  Int inbound_workload = 0;
  Int pending = 0;
  Rat buffer_size = 50 * 5/2;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(SentimentAnalyserInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  SentimentAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    SentimentAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(SentimentAnalyserPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "SA" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Maybe<Fut<String>> newRequest (String messageId){
      Maybe<Fut<String>> res = Nothing;
      inbound_workload = inbound_workload + 1;
      one_sec_reqs = one_sec_reqs + 1;
      if(pending < buffer_size) {
        pending = pending + 1;
        nextInstance = (nextInstance + 1) % length(instancesConnected);
        SentimentAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
        Fut<String> fut = selectedInstance!analyzeSentiments(this);
        res = Just(fut);
      } else {dbObj.messageLoss(messageId);}
      return res;
  }

  Unit removeMessage() {pending = pending - 1;}

}

interface SentimentAnalyserInterface   {
  String analyzeSentiments(SentimentAnalyser_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"SentimentAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 4,\"Memory\" : 250},\"sig\" : [],\"methods\" : []}]}"]
class SentimentAnalyser() implements SentimentAnalyserInterface {
  Int speed_res = 20;
  Int mcl = 100;

  String analyzeSentiments (SentimentAnalyser_LoadBalancerInterface balancer){
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    return "res";
  }
}

interface VirusScanner_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(VirusScannerInterface newInstance);
  VirusScannerInterface disconnectInstance();
  Unit newRequest(String messageId);
  Unit connectPlan(VirusScannerPlan p);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"VirusScanner_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"VirusScannerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"VirusScannerInterface\"}}]}]}"]
class VirusScanner_LoadBalancer(DBInterface db)  implements VirusScanner_LoadBalancerInterface {
  List<VirusScannerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 *  2;
  Int inbound_workload = 0;
  Map<Int,Rat> messagesTime = map[];
  VirusScannerPlan plan;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(VirusScannerInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  VirusScannerInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    VirusScannerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(VirusScannerPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "VS" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit newRequest (String messageId){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      VirusScannerInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!scanAttachment(messageId, this);
    } else {db.messageLoss(messageId);}
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface VirusScannerInterface {
  Unit scanAttachment (String messageId, VirusScanner_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"VirusScanner\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 4,\"Memory\" : 600},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"AttachmentsManager_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class VirusScanner(AttachmentsManager_LoadBalancerInterface attachmentsManagerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements VirusScannerInterface {
  Int speed_res = 20;
  Int mcl = 120;

  Unit scanAttachment(String messageId, VirusScanner_LoadBalancerInterface balancer){
    //scan attachment
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Bool virusFound = random(4) == 0;
    if(virusFound){messageAnalyserLoadBalancer.insertResult(messageId);}
    else{attachmentsManagerLoadBalancer.newRequest(messageId);}
  }
}

interface AttachmentsManager_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(AttachmentsManagerInterface newInstance);
  AttachmentsManagerInterface disconnectInstance();
  Unit newRequest(String messageId);
  Unit connectPlan(AttachmentsManagerPlan p);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"AttachmentsManager_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"AttachmentsManagerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"AttachmentsManagerInterface\"}}]}]}"]
class AttachmentsManager_LoadBalancer(DBInterface db)  implements AttachmentsManager_LoadBalancerInterface {
  List<AttachmentsManagerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;
  Int inbound_workload = 0;
  Map<Int,Rat> messagesTime = map[];
  AttachmentsManagerPlan plan;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(AttachmentsManagerInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  AttachmentsManagerInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    AttachmentsManagerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit connectPlan(AttachmentsManagerPlan p) {plan = p;}

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "AM" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit newRequest (String messageId){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      AttachmentsManagerInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!manageAttachments(messageId, this);
    } else {db.messageLoss(messageId);}
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface AttachmentsManagerInterface   {
  Unit manageAttachments(String messageId, AttachmentsManager_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"AttachmentsManager\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 100},\"sig\" : [ { \"kind\" : \"require\",\"type\" : \"ImageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class AttachmentsManager(ImageAnalyser_LoadBalancerInterface imageAnalyserLoadBalancer) implements AttachmentsManagerInterface {
  Int speed_res = 5;
  Int mcl = 231;

  Unit manageAttachments(String messageId, AttachmentsManager_LoadBalancerInterface balancer){
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    imageAnalyserLoadBalancer!newRequest(messageId);
  }
}

interface ImageAnalyser_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(ImageAnalyserInterface newInstance);
  ImageAnalyserInterface disconnectInstance();
  Unit newRequest (String messageId);
  Unit removeMessage();
  Unit connectPlan(ImageAnalyserPlan p);
}

//[SmartDeployCost : "{\"class\" : \"ImageAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"ImageAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"ImageAnalyserInterface\"}}]}]}"]
class ImageAnalyser_LoadBalancer(DBInterface db)  implements ImageAnalyser_LoadBalancerInterface {
  List<ImageAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;
  ImageAnalyserPlan plan;
  Int inbound_workload = 0;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(ImageAnalyserInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  ImageAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    ImageAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Unit connectPlan(ImageAnalyserPlan p) {plan = p;}

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit newRequest(String messageId){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      ImageAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!analyzeImage(messageId, this, db);
    } else {db.messageLoss(messageId);}
  }

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "IA" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit removeMessage() {pending = pending - 1;}
}

interface ImageAnalyserInterface {
  Unit analyzeImage(String messageId, ImageAnalyser_LoadBalancerInterface balancer,  DBInterface db);
}

////[SmartDeployCost : "{\"class\" : \"ImageAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 200},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"NSFWDetector_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"ImageRecognizer_LoadBalancerInterface\" }, { \"kind\" : \"require\",\"type\" : \"MessageAnalyser_LoadBalancerInterface\" }],\"methods\" : []}]}"]
class ImageAnalyser(NSFWDetector_LoadBalancerInterface nsfwDetectorLoadBalancer, ImageRecognizer_LoadBalancerInterface imageRecognizerLoadBalancer, MessageAnalyser_LoadBalancerInterface messageAnalyserLoadBalancer) implements ImageAnalyserInterface {
  Int speed_res = 5;
  Int mcl = 231;

  Unit analyzeImage (String messageId, ImageAnalyser_LoadBalancerInterface balancer, DBInterface db){
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    Maybe<Fut<Bool>> maybeNSFW = nsfwDetectorLoadBalancer.newRequest(messageId);
    Maybe<Fut<String>> maybeImageCategory = imageRecognizerLoadBalancer.newRequest(messageId);
    if(isJust(maybeNSFW) && isJust(maybeImageCategory)) {
      Fut<Bool> futNSFW = fromJust(maybeNSFW);
      await futNSFW?;
      Fut<String> futImageCategory = fromJust(maybeImageCategory);
      await futImageCategory?;
      messageAnalyserLoadBalancer.insertResult(messageId);
    }
  }
}

interface NSFWDetector_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(NSFWDetectorInterface newInstance);
  NSFWDetectorInterface disconnectInstance();
  Maybe<Fut<Bool>> newRequest(String messageId);
  Unit connectPlan(NSFWDetectorPlan p);
  Unit removeMessage();
}

//[SmartDeployCost : "{\"class\" : \"NSFWDetector_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"NSFWDetectorInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"NSFWDetectorInterface\"}}]}]}"]
class NSFWDetector_LoadBalancer(DBInterface db)  implements NSFWDetector_LoadBalancerInterface {
  List<NSFWDetectorInterface> instancesConnected = list[];
  Int nextInstance = -1;
  NSFWDetectorPlan plan;
  Int inbound_workload = 0;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}


  Unit connectInstance(NSFWDetectorInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  NSFWDetectorInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    NSFWDetectorInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(NSFWDetectorPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "NSFW" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Maybe<Fut<Bool>> newRequest (String messageId){
    Maybe<Fut<Bool>> res = Nothing;
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      pending = pending + 1;
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      NSFWDetectorInterface selectedInstance = nth(instancesConnected, nextInstance);
      Fut<Bool> fut = selectedInstance!nsfwDetection(this);
      res = Just(fut);
    } else {db.messageLoss(messageId);}
    return res;
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface NSFWDetectorInterface   {
  Bool nsfwDetection(NSFWDetector_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"NSFWDetector\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 6,\"Memory\" : 800},\"sig\" : [],\"methods\" : []}]}"]
class NSFWDetector() implements NSFWDetectorInterface {
  Int yesOrNot = -1;
  Int speed_res = 30;
  Int mcl = 90;

  Bool nsfwDetection(NSFWDetector_LoadBalancerInterface balancer){
		[Cost: speed_res * 30 / mcl] skip;
    balancer!removeMessage();
    yesOrNot = yesOrNot + 1;
    return yesOrNot%3 == 0;
  }
}

interface ImageRecognizer_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(ImageRecognizerInterface newInstance);
  ImageRecognizerInterface disconnectInstance();
  Maybe<Fut<String>> newRequest (String messageId);
  Unit connectPlan(ImageRecognizerPlan p);
  Unit removeMessage();

}

//[SmartDeployCost : "{\"class\" : \"ImageRecognizer_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"ImageRecognizerInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"ImageRecognizerInterface\"}}]}]}"]
class ImageRecognizer_LoadBalancer(DBInterface db)  implements ImageRecognizer_LoadBalancerInterface {
  List<ImageRecognizerInterface> instancesConnected = list[];
  Int nextInstance = -1;
  ImageRecognizerPlan plan;
  Int inbound_workload = 0;
  Int pending = 0;
  Rat buffer_size = 50 * 3/2;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(ImageRecognizerInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  ImageRecognizerInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    ImageRecognizerInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(ImageRecognizerPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "IR" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Maybe<Fut<String>> newRequest(String messageId){
    Maybe<Fut<String>> res = Nothing;
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      pending = pending + 1;
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      ImageRecognizerInterface selectedInstance = nth(instancesConnected, nextInstance);
      Fut<String> fut = selectedInstance!recognizeImage(this);
      res = Just(fut);
    } else {db.messageLoss(messageId);}
    return res;
  }

  Unit removeMessage() {pending = pending - 1;}
}

interface ImageRecognizerInterface {
  String recognizeImage(ImageRecognizer_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"ImageRecognizer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 6,\"Memory\" : 800},\"sig\" : [],\"methods\" : []}]}"]
class ImageRecognizer() implements ImageRecognizerInterface {
  Int speed_res = 30;
  Int mcl = 90;

  String recognizeImage(ImageRecognizer_LoadBalancerInterface balancer){
		[Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
    return "res";
  }
}

interface MessageAnalyser_LoadBalancerInterface extends LoadBalancer {
  Unit connectInstance(MessageAnalyserInterface newInstance);
  MessageAnalyserInterface disconnectInstance();
  Unit insertResult(String id);
  Unit removeMessage();
  Unit connectPlan(MessageAnalyserPlan p);
}

//[SmartDeployCost : "{\"class\" : \"MessageAnalyser_LoadBalancer\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 2,\"Memory\" : 200},\"sig\" : [{\"kind\" : \"require\",\"type\" : \"DBInterface\"}], \"methods\" : [{\"add\" : {\"name\" : \"connectInstance\",\"param_type\" : \"MessageAnalyserInterface\"},\"remove\" : {\"name\" : \"disconnectInstance\", \"return_type\": \"MessageAnalyserInterface\"}}]}]}"]
class MessageAnalyser_LoadBalancer(DBInterface db)  implements MessageAnalyser_LoadBalancerInterface {
  List<MessageAnalyserInterface> instancesConnected = list[];
  Int nextInstance = -1;
  Rat buffer_size = 50 * 5;
  Int pending = 0;
  Int inbound_workload = 0;
  MessageAnalyserPlan plan;
  Int deplTimes = 0;
  Int max = 0;
  Int one_sec_reqs = 0;

  Unit tick() {
    if(max <= one_sec_reqs) max = one_sec_reqs;
    one_sec_reqs = 0;
  }

  Int get_one_sec_workload() {return max;}

  Unit connectInstance(MessageAnalyserInterface newInstance){
    if(plan != null) {deplTimes = deplTimes + 1;}
    instancesConnected = appendright(instancesConnected, newInstance);
  }

  MessageAnalyserInterface disconnectInstance(){
    deplTimes = deplTimes - 1;
    MessageAnalyserInterface removedInstance = nth(instancesConnected, length(instancesConnected)-1);
    instancesConnected = without(instancesConnected, removedInstance);
    return removedInstance;
  }

  Rat getCost() {
    Rat totalCost = 0;
    List<DeploymentComponent> dcs = plan.getDeploymentComponent();
    if(length(dcs) > 0) {
      DeploymentComponent dc = nth(dcs,0);
      Rat cost = dc.getCostPerInterval();
      totalCost = deplTimes * cost;
    }
    return totalCost;
  }

  Unit connectPlan(MessageAnalyserPlan p) {plan = p;}

  Unit resetMetrics() {
    inbound_workload = 0;
    one_sec_reqs = 0;
    max = 0;
  }

  String getInstanceNumberDescription() {return "MA" + toString(length(instancesConnected)) + " ";}

  Unit deploy() {plan!deploy();}

  Unit undeploy() {plan!undeploy();}

  Int getInstancesNumber() {return length(instancesConnected);}

  Int returninbound_workload() {return inbound_workload;}

  Unit insertResult(String id){
    inbound_workload = inbound_workload + 1;
    one_sec_reqs = one_sec_reqs + 1;
    if(pending < buffer_size) {
      nextInstance = (nextInstance + 1) % length(instancesConnected);
      MessageAnalyserInterface selectedInstance = nth(instancesConnected, nextInstance);
      pending = pending + 1;
      selectedInstance!insertResult(id, this);
    } else {db.messageLoss(id);}
  }

  Unit removeMessage(){pending = pending - 1;}
}

interface MessageAnalyserInterface {
    Unit insertResult(String id, MessageAnalyser_LoadBalancerInterface balancer);
}

////[SmartDeployCost : "{\"class\" : \"MessageAnalyser\",\"scenarios\" : [{\"name\" : \"default\",\"provide\" : -1,\"cost\" : {\"Cores\" : 1,\"Memory\" : 300},\"sig\" : [{ \"kind\" : \"require\",\"type\" : \"DBInterface\" }],\"methods\" : []}]}"]
class MessageAnalyser(DBInterface db) implements MessageAnalyserInterface {
  Int speed_res = 5;
  Int mcl = 300;

  Unit insertResult(String id, MessageAnalyser_LoadBalancerInterface balancer) {
    [Cost: speed_res * 30 / mcl] skip;
    balancer.removeMessage();
		Int numberOfActivityWaiting = db.insertResult(id);
    if(numberOfActivityWaiting == 0){db.analysisTimeTick(id);}
  }
}
